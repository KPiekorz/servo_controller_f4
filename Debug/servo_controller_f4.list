
servo_controller_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004958  08004958  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004960  08004960  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000070  080049d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080049d8  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c99a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cef  00000000  00000000  0002ca3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002e730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002f418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227c0  00000000  00000000  00030008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fb6  00000000  00000000  000527c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ff7  00000000  00000000  0005c77e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  001307f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048e0 	.word	0x080048e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080048e0 	.word	0x080048e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	0000      	movs	r0, r0
	...

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b598      	push	{r3, r4, r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f000 fc4a 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f8b4 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 fa04 	bl	80011b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db0:	f000 f9d8 	bl	8001164 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000db4:	f000 f972 	bl	800109c <MX_TIM3_Init>
  MX_ADC3_Init();
 8000db8:	f000 f91e 	bl	8000ff8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  // start adc to get trimmer motor control
  HAL_ADC_Start(&hadc3);
 8000dbc:	484c      	ldr	r0, [pc, #304]	; (8000ef0 <main+0x150>)
 8000dbe:	f000 fcf3 	bl	80017a8 <HAL_ADC_Start>

  // start pwm motor first direction
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	484b      	ldr	r0, [pc, #300]	; (8000ef4 <main+0x154>)
 8000dc6:	f002 f8b1 	bl	8002f2c <HAL_TIM_PWM_Start>

  // start pwm motor reverse direction
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000dca:	210c      	movs	r1, #12
 8000dcc:	4849      	ldr	r0, [pc, #292]	; (8000ef4 <main+0x154>)
 8000dce:	f002 f8ad 	bl	8002f2c <HAL_TIM_PWM_Start>

  // set defult duty value
  TIM3->CCR3 = 500;
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <main+0x158>)
 8000dd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dd8:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = 500;
 8000dda:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <main+0x158>)
 8000ddc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK){
 8000de2:	210a      	movs	r1, #10
 8000de4:	4842      	ldr	r0, [pc, #264]	; (8000ef0 <main+0x150>)
 8000de6:	f000 fda5 	bl	8001934 <HAL_ADC_PollForConversion>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d173      	bne.n	8000ed8 <main+0x138>

		  PomiarADC_motor_trimmer = HAL_ADC_GetValue(&hadc3);
 8000df0:	483f      	ldr	r0, [pc, #252]	; (8000ef0 <main+0x150>)
 8000df2:	f000 fe23 	bl	8001a3c <HAL_ADC_GetValue>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <main+0x15c>)
 8000dfc:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Start(&hadc3);
 8000dfe:	483c      	ldr	r0, [pc, #240]	; (8000ef0 <main+0x150>)
 8000e00:	f000 fcd2 	bl	80017a8 <HAL_ADC_Start>

		  sprintf(uart_msg, "Pomiar adc: %d\r\n", PomiarADC_motor_trimmer);
 8000e04:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <main+0x15c>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	493d      	ldr	r1, [pc, #244]	; (8000f00 <main+0x160>)
 8000e0c:	483d      	ldr	r0, [pc, #244]	; (8000f04 <main+0x164>)
 8000e0e:	f003 f961 	bl	80040d4 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg), 10);
 8000e12:	483c      	ldr	r0, [pc, #240]	; (8000f04 <main+0x164>)
 8000e14:	f7ff f9fc 	bl	8000210 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	4939      	ldr	r1, [pc, #228]	; (8000f04 <main+0x164>)
 8000e20:	4839      	ldr	r0, [pc, #228]	; (8000f08 <main+0x168>)
 8000e22:	f002 fcc6 	bl	80037b2 <HAL_UART_Transmit>

		  if(PomiarADC_motor_trimmer <= 2048){ // control pwm first direction
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <main+0x15c>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e2e:	d826      	bhi.n	8000e7e <main+0xde>

			  TIM3->CCR4 = 0;
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <main+0x158>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40

			  TIM3->CCR3 = ((float)PomiarADC_motor_trimmer/2048.0)*10000.0;
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <main+0x15c>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e42:	ee17 0a90 	vmov	r0, s15
 8000e46:	f7ff fb9f 	bl	8000588 <__aeabi_f2d>
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <main+0x16c>)
 8000e50:	f7ff fd1c 	bl	800088c <__aeabi_ddiv>
 8000e54:	4603      	mov	r3, r0
 8000e56:	460c      	mov	r4, r1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	a322      	add	r3, pc, #136	; (adr r3, 8000ee8 <main+0x148>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fbe9 	bl	8000638 <__aeabi_dmul>
 8000e66:	4603      	mov	r3, r0
 8000e68:	460c      	mov	r4, r1
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4623      	mov	r3, r4
 8000e6e:	4c22      	ldr	r4, [pc, #136]	; (8000ef8 <main+0x158>)
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fdf2 	bl	8000a5c <__aeabi_d2uiz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000e7c:	e02c      	b.n	8000ed8 <main+0x138>

		  }else{ // control pwm reverse direction

			  TIM3->CCR3 = 0;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <main+0x158>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c

			  PomiarADC_motor_trimmer -= 2049;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <main+0x15c>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <main+0x15c>)
 8000e90:	801a      	strh	r2, [r3, #0]
			  TIM3->CCR4 = ((float)PomiarADC_motor_trimmer/2048.0)*10000.0;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <main+0x15c>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9e:	ee17 0a90 	vmov	r0, s15
 8000ea2:	f7ff fb71 	bl	8000588 <__aeabi_f2d>
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <main+0x16c>)
 8000eac:	f7ff fcee 	bl	800088c <__aeabi_ddiv>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	a30b      	add	r3, pc, #44	; (adr r3, 8000ee8 <main+0x148>)
 8000eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebe:	f7ff fbbb 	bl	8000638 <__aeabi_dmul>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4623      	mov	r3, r4
 8000eca:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <main+0x158>)
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fdc4 	bl	8000a5c <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	6423      	str	r3, [r4, #64]	; 0x40
		  }


	  }

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ed8:	2120      	movs	r1, #32
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <main+0x170>)
 8000edc:	f001 fa7b 	bl	80023d6 <HAL_GPIO_TogglePin>
	  if(HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK){
 8000ee0:	e77f      	b.n	8000de2 <main+0x42>
 8000ee2:	bf00      	nop
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	40c38800 	.word	0x40c38800
 8000ef0:	20000208 	.word	0x20000208
 8000ef4:	200001c4 	.word	0x200001c4
 8000ef8:	40000400 	.word	0x40000400
 8000efc:	20000204 	.word	0x20000204
 8000f00:	080048f8 	.word	0x080048f8
 8000f04:	20000098 	.word	0x20000098
 8000f08:	20000250 	.word	0x20000250
 8000f0c:	40a00000 	.word	0x40a00000
 8000f10:	40020000 	.word	0x40020000

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2234      	movs	r2, #52	; 0x34
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f8ce 	bl	80040c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <SystemClock_Config+0xdc>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <SystemClock_Config+0xdc>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <SystemClock_Config+0xdc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <SystemClock_Config+0xe0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <SystemClock_Config+0xe0>)
 8000f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <SystemClock_Config+0xe0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f84:	2308      	movs	r3, #8
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f88:	23b4      	movs	r3, #180	; 0xb4
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 fd3f 	bl	8002a20 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa8:	f000 f976 	bl	8001298 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fac:	f001 fa2e 	bl	800240c <HAL_PWREx_EnableOverDrive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb6:	f000 f96f 	bl	8001298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fa67 	bl	80024ac <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fe4:	f000 f958 	bl	8001298 <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	; 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC3_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC3_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC3_Init+0x98>)
 8001012:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001016:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC3_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC3_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC3_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC3_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC3_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC3_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC3_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC3_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC3_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC3_Init+0x98>)
 800105a:	f000 fb61 	bl	8001720 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 f918 	bl	8001298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001068:	2301      	movs	r3, #1
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001070:	2307      	movs	r3, #7
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC3_Init+0x98>)
 800107a:	f000 fced 	bl	8001a58 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 f908 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000208 	.word	0x20000208
 8001094:	40012200 	.word	0x40012200
 8001098:	0f000001 	.word	0x0f000001

0800109c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_TIM3_Init+0xc0>)
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <MX_TIM3_Init+0xc4>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_TIM3_Init+0xc0>)
 80010c6:	2211      	movs	r2, #17
 80010c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_TIM3_Init+0xc0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_TIM3_Init+0xc0>)
 80010d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80010d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <MX_TIM3_Init+0xc0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_TIM3_Init+0xc0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010e4:	481d      	ldr	r0, [pc, #116]	; (800115c <MX_TIM3_Init+0xc0>)
 80010e6:	f001 fef5 	bl	8002ed4 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010f0:	f000 f8d2 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	4619      	mov	r1, r3
 8001102:	4816      	ldr	r0, [pc, #88]	; (800115c <MX_TIM3_Init+0xc0>)
 8001104:	f002 fa8c 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800110e:	f000 f8c3 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	; 0x60
 8001114:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2208      	movs	r2, #8
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_TIM3_Init+0xc0>)
 800112a:	f001 ff3d 	bl	8002fa8 <HAL_TIM_PWM_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001134:	f000 f8b0 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	220c      	movs	r2, #12
 800113c:	4619      	mov	r1, r3
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <MX_TIM3_Init+0xc0>)
 8001140:	f001 ff32 	bl	8002fa8 <HAL_TIM_PWM_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800114a:	f000 f8a5 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <MX_TIM3_Init+0xc0>)
 8001150:	f000 f938 	bl	80013c4 <HAL_TIM_MspPostInit>

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200001c4 	.word	0x200001c4
 8001160:	40000400 	.word	0x40000400

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f002 fabc 	bl	8003718 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f877 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000250 	.word	0x20000250
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a25      	ldr	r2, [pc, #148]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <MX_GPIO_Init+0xd0>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2120      	movs	r1, #32
 8001242:	4812      	ldr	r0, [pc, #72]	; (800128c <MX_GPIO_Init+0xd4>)
 8001244:	f001 f8ae 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_GPIO_Init+0xd8>)
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_GPIO_Init+0xdc>)
 800125e:	f000 ff0f 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001262:	2320      	movs	r3, #32
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_GPIO_Init+0xd4>)
 800127a:	f000 ff01 	bl	8002080 <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	10210000 	.word	0x10210000
 8001294:	40020800 	.word	0x40020800

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_MspInit+0x4c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e6:	2007      	movs	r0, #7
 80012e8:	f000 fe96 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_ADC_MspInit+0x7c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d127      	bne.n	800136a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_ADC_MspInit+0x80>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_ADC_MspInit+0x80>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PA1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_ADC_MspInit+0x84>)
 8001366:	f000 fe8b 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012200 	.word	0x40012200
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_TIM_PWM_MspInit+0x3c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10d      	bne.n	80013ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_TIM_PWM_MspInit+0x40>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_TIM_PWM_MspInit+0x40>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_TIM_PWM_MspInit+0x40>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <HAL_TIM_MspPostInit+0xa4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d13c      	bne.n	8001460 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_TIM_MspPostInit+0xa8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_TIM_MspPostInit+0xa8>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_TIM_MspPostInit+0xa8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_TIM_MspPostInit+0xa8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <HAL_TIM_MspPostInit+0xa8>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_TIM_MspPostInit+0xa8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142e:	2302      	movs	r3, #2
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_TIM_MspPostInit+0xac>)
 800143a:	f000 fe21 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800143e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001450:	2302      	movs	r3, #2
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <HAL_TIM_MspPostInit+0xb0>)
 800145c:	f000 fe10 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40000400 	.word	0x40000400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800

08001478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_UART_MspInit+0x84>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12b      	bne.n	80014f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d2:	230c      	movs	r3, #12
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e2:	2307      	movs	r3, #7
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_UART_MspInit+0x8c>)
 80014ee:	f000 fdc7 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40004400 	.word	0x40004400
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f8c0 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x50>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x16>
		heap_end = &end;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <_sbrk+0x50>)
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <_sbrk+0x54>)
 8001578:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <_sbrk+0x50>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <_sbrk+0x50>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	466a      	mov	r2, sp
 800158a:	4293      	cmp	r3, r2
 800158c:	d907      	bls.n	800159e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800158e:	f002 fd6f 	bl	8004070 <__errno>
 8001592:	4602      	mov	r2, r0
 8001594:	230c      	movs	r3, #12
 8001596:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e006      	b.n	80015ac <_sbrk+0x48>
	}

	heap_end += incr;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <_sbrk+0x50>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <_sbrk+0x50>)
 80015a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000008c 	.word	0x2000008c
 80015b8:	20000298 	.word	0x20000298

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <SystemInit+0x28>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <SystemInit+0x28>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SystemInit+0x28>)
 80015d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d6:	609a      	str	r2, [r3, #8]
#endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001620 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ee:	e003      	b.n	80015f8 <LoopCopyDataInit>

080015f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015f6:	3104      	adds	r1, #4

080015f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001600:	d3f6      	bcc.n	80015f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001604:	e002      	b.n	800160c <LoopFillZerobss>

08001606 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001606:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001608:	f842 3b04 	str.w	r3, [r2], #4

0800160c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800160e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001610:	d3f9      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001612:	f7ff ffd3 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f002 fd31 	bl	800407c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161a:	f7ff fbc1 	bl	8000da0 <main>
  bx  lr    
 800161e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001620:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001624:	08004968 	.word	0x08004968
  ldr  r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800162c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001630:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001634:	20000298 	.word	0x20000298

08001638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_Init+0x40>)
 8001646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_Init+0x40>)
 8001652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_Init+0x40>)
 800165e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 fcd7 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff fe1a 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fce1 	bl	8002066 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 fcb7 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008
 8001704:	20000290 	.word	0x20000290

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000290 	.word	0x20000290

08001720 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e033      	b.n	800179e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fdda 	bl	80012f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001766:	f023 0302 	bic.w	r3, r3, #2
 800176a:	f043 0202 	orr.w	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 faa2 	bl	8001cbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f023 0303 	bic.w	r3, r3, #3
 8001786:	f043 0201 	orr.w	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
 800178e:	e001      	b.n	8001794 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_Start+0x1a>
 80017be:	2302      	movs	r3, #2
 80017c0:	e0a5      	b.n	800190e <HAL_ADC_Start+0x166>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d018      	beq.n	800180a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_ADC_Start+0x174>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_ADC_Start+0x178>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0c9a      	lsrs	r2, r3, #18
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017fc:	e002      	b.n	8001804 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3b01      	subs	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f9      	bne.n	80017fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d179      	bne.n	800190c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001842:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001856:	d106      	bne.n	8001866 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	f023 0206 	bic.w	r2, r3, #6
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	645a      	str	r2, [r3, #68]	; 0x44
 8001864:	e002      	b.n	800186c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_ADC_Start+0x17c>)
 8001876:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001880:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12a      	bne.n	80018e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_ADC_Start+0x180>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d015      	beq.n	80018c4 <HAL_ADC_Start+0x11c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a23      	ldr	r2, [pc, #140]	; (800192c <HAL_ADC_Start+0x184>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d105      	bne.n	80018ae <HAL_ADC_Start+0x106>
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_ADC_Start+0x17c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_ADC_Start+0x188>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d129      	bne.n	800190c <HAL_ADC_Start+0x164>
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_ADC_Start+0x17c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d823      	bhi.n	800190c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11c      	bne.n	800190c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	e013      	b.n	800190c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <HAL_ADC_Start+0x180>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10e      	bne.n	800190c <HAL_ADC_Start+0x164>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800190a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000
 8001920:	431bde83 	.word	0x431bde83
 8001924:	40012300 	.word	0x40012300
 8001928:	40012000 	.word	0x40012000
 800192c:	40012100 	.word	0x40012100
 8001930:	40012200 	.word	0x40012200

08001934 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001950:	d113      	bne.n	800197a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800195c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001960:	d10b      	bne.n	800197a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f043 0220 	orr.w	r2, r3, #32
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e05c      	b.n	8001a34 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800197a:	f7ff fec5 	bl	8001708 <HAL_GetTick>
 800197e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001980:	e01a      	b.n	80019b8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d016      	beq.n	80019b8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_ADC_PollForConversion+0x6c>
 8001990:	f7ff feba 	bl	8001708 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d20b      	bcs.n	80019b8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f043 0204 	orr.w	r2, r3, #4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e03d      	b.n	8001a34 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d1dd      	bne.n	8001982 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0212 	mvn.w	r2, #18
 80019ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d123      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d11f      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d111      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1c>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e113      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x244>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d925      	bls.n	8001ad0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68d9      	ldr	r1, [r3, #12]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	3b1e      	subs	r3, #30
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68d9      	ldr	r1, [r3, #12]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4403      	add	r3, r0
 8001ac2:	3b1e      	subs	r3, #30
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	e022      	b.n	8001b16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	400a      	ands	r2, r1
 8001af2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4403      	add	r3, r0
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d824      	bhi.n	8001b68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b05      	subs	r3, #5
 8001b30:	221f      	movs	r2, #31
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b05      	subs	r3, #5
 8001b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
 8001b66:	e04c      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d824      	bhi.n	8001bba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b23      	subs	r3, #35	; 0x23
 8001b82:	221f      	movs	r2, #31
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	400a      	ands	r2, r1
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b23      	subs	r3, #35	; 0x23
 8001bac:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb8:	e023      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b41      	subs	r3, #65	; 0x41
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b41      	subs	r3, #65	; 0x41
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_ADC_ConfigChannel+0x250>)
 8001c04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_ADC_ConfigChannel+0x254>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d10f      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d8>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b12      	cmp	r3, #18
 8001c16:	d10b      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_ADC_ConfigChannel+0x254>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x23a>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_ADC_ConfigChannel+0x258>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d003      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x1f4>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b11      	cmp	r3, #17
 8001c4a:	d122      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_ADC_ConfigChannel+0x258>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d111      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_ADC_ConfigChannel+0x25c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_ADC_ConfigChannel+0x260>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	0c9a      	lsrs	r2, r3, #18
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c84:	e002      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f9      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	10000012 	.word	0x10000012
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc4:	4b79      	ldr	r3, [pc, #484]	; (8001eac <ADC_Init+0x1f0>)
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	021a      	lsls	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6899      	ldr	r1, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <ADC_Init+0x1f4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6899      	ldr	r1, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6899      	ldr	r1, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	e00f      	b.n	8001dba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0202 	bic.w	r2, r2, #2
 8001dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6899      	ldr	r1, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7e1b      	ldrb	r3, [r3, #24]
 8001dd4:	005a      	lsls	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6859      	ldr	r1, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	3b01      	subs	r3, #1
 8001e14:	035a      	lsls	r2, r3, #13
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	e007      	b.n	8001e30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	051a      	lsls	r2, r3, #20
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e72:	025a      	lsls	r2, r3, #9
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	029a      	lsls	r2, r3, #10
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	609a      	str	r2, [r3, #8]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40012300 	.word	0x40012300
 8001eb0:	0f000001 	.word	0x0f000001

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff47 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff5c 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffb0 	bl	8001fd4 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	e165      	b.n	8002368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800209c:	2201      	movs	r2, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 8154 	bne.w	8002362 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d00b      	beq.n	80020da <HAL_GPIO_Init+0x5a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ce:	2b11      	cmp	r3, #17
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0xfc>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d123      	bne.n	80021c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80ae 	beq.w	8002362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b5c      	ldr	r3, [pc, #368]	; (800237c <HAL_GPIO_Init+0x2fc>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a5b      	ldr	r2, [pc, #364]	; (800237c <HAL_GPIO_Init+0x2fc>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_GPIO_Init+0x2fc>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002222:	4a57      	ldr	r2, [pc, #348]	; (8002380 <HAL_GPIO_Init+0x300>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	220f      	movs	r2, #15
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <HAL_GPIO_Init+0x304>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d025      	beq.n	800229a <HAL_GPIO_Init+0x21a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4d      	ldr	r2, [pc, #308]	; (8002388 <HAL_GPIO_Init+0x308>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01f      	beq.n	8002296 <HAL_GPIO_Init+0x216>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4c      	ldr	r2, [pc, #304]	; (800238c <HAL_GPIO_Init+0x30c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d019      	beq.n	8002292 <HAL_GPIO_Init+0x212>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4b      	ldr	r2, [pc, #300]	; (8002390 <HAL_GPIO_Init+0x310>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0x20e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4a      	ldr	r2, [pc, #296]	; (8002394 <HAL_GPIO_Init+0x314>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00d      	beq.n	800228a <HAL_GPIO_Init+0x20a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a49      	ldr	r2, [pc, #292]	; (8002398 <HAL_GPIO_Init+0x318>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0x206>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a48      	ldr	r2, [pc, #288]	; (800239c <HAL_GPIO_Init+0x31c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_GPIO_Init+0x202>
 800227e:	2306      	movs	r3, #6
 8002280:	e00c      	b.n	800229c <HAL_GPIO_Init+0x21c>
 8002282:	2307      	movs	r3, #7
 8002284:	e00a      	b.n	800229c <HAL_GPIO_Init+0x21c>
 8002286:	2305      	movs	r3, #5
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x21c>
 800228a:	2304      	movs	r3, #4
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x21c>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x21c>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x21c>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x21c>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ac:	4934      	ldr	r1, [pc, #208]	; (8002380 <HAL_GPIO_Init+0x300>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <HAL_GPIO_Init+0x320>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022de:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <HAL_GPIO_Init+0x320>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_GPIO_Init+0x320>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002308:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <HAL_GPIO_Init+0x320>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_GPIO_Init+0x320>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <HAL_GPIO_Init+0x320>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_GPIO_Init+0x320>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_GPIO_Init+0x320>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f ae96 	bls.w	800209c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	3724      	adds	r7, #36	; 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40023800 	.word	0x40023800
 8002380:	40013800 	.word	0x40013800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40021400 	.word	0x40021400
 800239c:	40021800 	.word	0x40021800
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c0:	e003      	b.n	80023ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	401a      	ands	r2, r3
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d104      	bne.n	80023fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	041a      	lsls	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_PWREx_EnableOverDrive+0x90>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_PWREx_EnableOverDrive+0x90>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_PWREx_EnableOverDrive+0x90>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002438:	f7ff f966 	bl	8001708 <HAL_GetTick>
 800243c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800243e:	e009      	b.n	8002454 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002440:	f7ff f962 	bl	8001708 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800244e:	d901      	bls.n	8002454 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e01f      	b.n	8002494 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d1ee      	bne.n	8002440 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002468:	f7ff f94e 	bl	8001708 <HAL_GetTick>
 800246c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800246e:	e009      	b.n	8002484 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002470:	f7ff f94a 	bl	8001708 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247e:	d901      	bls.n	8002484 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e007      	b.n	8002494 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002490:	d1ee      	bne.n	8002470 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	420e0040 	.word	0x420e0040
 80024a4:	40007000 	.word	0x40007000
 80024a8:	420e0044 	.word	0x420e0044

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7ff f8b4 	bl	8001708 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff f8b0 	bl	8001708 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f855 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8002636:	4601      	mov	r1, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	fa21 f303 	lsr.w	r3, r1, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f814 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	0800490c 	.word	0x0800490c
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_GetHCLKFreq+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000000 	.word	0x20000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002694:	f7ff fff0 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8002698:	4601      	mov	r1, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0a9b      	lsrs	r3, r3, #10
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	0800491c 	.word	0x0800491c

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026bc:	f7ff ffdc 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026c0:	4601      	mov	r1, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0b5b      	lsrs	r3, r3, #13
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4a03      	ldr	r2, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	0800491c 	.word	0x0800491c

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fa:	4bc6      	ldr	r3, [pc, #792]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b0c      	cmp	r3, #12
 8002704:	f200 817e 	bhi.w	8002a04 <HAL_RCC_GetSysClockFreq+0x324>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_RCC_GetSysClockFreq+0x30>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002745 	.word	0x08002745
 8002714:	08002a05 	.word	0x08002a05
 8002718:	08002a05 	.word	0x08002a05
 800271c:	08002a05 	.word	0x08002a05
 8002720:	0800274b 	.word	0x0800274b
 8002724:	08002a05 	.word	0x08002a05
 8002728:	08002a05 	.word	0x08002a05
 800272c:	08002a05 	.word	0x08002a05
 8002730:	08002751 	.word	0x08002751
 8002734:	08002a05 	.word	0x08002a05
 8002738:	08002a05 	.word	0x08002a05
 800273c:	08002a05 	.word	0x08002a05
 8002740:	080028ad 	.word	0x080028ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4bb4      	ldr	r3, [pc, #720]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x338>)
 8002746:	613b      	str	r3, [r7, #16]
       break;
 8002748:	e15f      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4bb4      	ldr	r3, [pc, #720]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x33c>)
 800274c:	613b      	str	r3, [r7, #16]
      break;
 800274e:	e15c      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002750:	4bb0      	ldr	r3, [pc, #704]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002758:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275a:	4bae      	ldr	r3, [pc, #696]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04a      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002766:	4bab      	ldr	r3, [pc, #684]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	f04f 0400 	mov.w	r4, #0
 8002770:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	ea03 0501 	and.w	r5, r3, r1
 800277c:	ea04 0602 	and.w	r6, r4, r2
 8002780:	4629      	mov	r1, r5
 8002782:	4632      	mov	r2, r6
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	f04f 0400 	mov.w	r4, #0
 800278c:	0154      	lsls	r4, r2, #5
 800278e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002792:	014b      	lsls	r3, r1, #5
 8002794:	4619      	mov	r1, r3
 8002796:	4622      	mov	r2, r4
 8002798:	1b49      	subs	r1, r1, r5
 800279a:	eb62 0206 	sbc.w	r2, r2, r6
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	f04f 0400 	mov.w	r4, #0
 80027a6:	0194      	lsls	r4, r2, #6
 80027a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027ac:	018b      	lsls	r3, r1, #6
 80027ae:	1a5b      	subs	r3, r3, r1
 80027b0:	eb64 0402 	sbc.w	r4, r4, r2
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	00e2      	lsls	r2, r4, #3
 80027be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027c2:	00d9      	lsls	r1, r3, #3
 80027c4:	460b      	mov	r3, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	195b      	adds	r3, r3, r5
 80027ca:	eb44 0406 	adc.w	r4, r4, r6
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	0262      	lsls	r2, r4, #9
 80027d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027dc:	0259      	lsls	r1, r3, #9
 80027de:	460b      	mov	r3, r1
 80027e0:	4614      	mov	r4, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	4621      	mov	r1, r4
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f04f 0400 	mov.w	r4, #0
 80027ec:	461a      	mov	r2, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	f7fe f954 	bl	8000a9c <__aeabi_uldivmod>
 80027f4:	4603      	mov	r3, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e049      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fc:	4b85      	ldr	r3, [pc, #532]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	f04f 0400 	mov.w	r4, #0
 8002806:	f240 11ff 	movw	r1, #511	; 0x1ff
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	ea03 0501 	and.w	r5, r3, r1
 8002812:	ea04 0602 	and.w	r6, r4, r2
 8002816:	4629      	mov	r1, r5
 8002818:	4632      	mov	r2, r6
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	f04f 0400 	mov.w	r4, #0
 8002822:	0154      	lsls	r4, r2, #5
 8002824:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002828:	014b      	lsls	r3, r1, #5
 800282a:	4619      	mov	r1, r3
 800282c:	4622      	mov	r2, r4
 800282e:	1b49      	subs	r1, r1, r5
 8002830:	eb62 0206 	sbc.w	r2, r2, r6
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f04f 0400 	mov.w	r4, #0
 800283c:	0194      	lsls	r4, r2, #6
 800283e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002842:	018b      	lsls	r3, r1, #6
 8002844:	1a5b      	subs	r3, r3, r1
 8002846:	eb64 0402 	sbc.w	r4, r4, r2
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	00e2      	lsls	r2, r4, #3
 8002854:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002858:	00d9      	lsls	r1, r3, #3
 800285a:	460b      	mov	r3, r1
 800285c:	4614      	mov	r4, r2
 800285e:	195b      	adds	r3, r3, r5
 8002860:	eb44 0406 	adc.w	r4, r4, r6
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	02a2      	lsls	r2, r4, #10
 800286e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002872:	0299      	lsls	r1, r3, #10
 8002874:	460b      	mov	r3, r1
 8002876:	4614      	mov	r4, r2
 8002878:	4618      	mov	r0, r3
 800287a:	4621      	mov	r1, r4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f04f 0400 	mov.w	r4, #0
 8002882:	461a      	mov	r2, r3
 8002884:	4623      	mov	r3, r4
 8002886:	f7fe f909 	bl	8000a9c <__aeabi_uldivmod>
 800288a:	4603      	mov	r3, r0
 800288c:	460c      	mov	r4, r1
 800288e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002890:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	3301      	adds	r3, #1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	613b      	str	r3, [r7, #16]
      break;
 80028aa:	e0ae      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b6:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04a      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	f04f 0400 	mov.w	r4, #0
 80028cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	ea03 0501 	and.w	r5, r3, r1
 80028d8:	ea04 0602 	and.w	r6, r4, r2
 80028dc:	4629      	mov	r1, r5
 80028de:	4632      	mov	r2, r6
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	f04f 0400 	mov.w	r4, #0
 80028e8:	0154      	lsls	r4, r2, #5
 80028ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ee:	014b      	lsls	r3, r1, #5
 80028f0:	4619      	mov	r1, r3
 80028f2:	4622      	mov	r2, r4
 80028f4:	1b49      	subs	r1, r1, r5
 80028f6:	eb62 0206 	sbc.w	r2, r2, r6
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	f04f 0400 	mov.w	r4, #0
 8002902:	0194      	lsls	r4, r2, #6
 8002904:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002908:	018b      	lsls	r3, r1, #6
 800290a:	1a5b      	subs	r3, r3, r1
 800290c:	eb64 0402 	sbc.w	r4, r4, r2
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	00e2      	lsls	r2, r4, #3
 800291a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800291e:	00d9      	lsls	r1, r3, #3
 8002920:	460b      	mov	r3, r1
 8002922:	4614      	mov	r4, r2
 8002924:	195b      	adds	r3, r3, r5
 8002926:	eb44 0406 	adc.w	r4, r4, r6
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	0262      	lsls	r2, r4, #9
 8002934:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002938:	0259      	lsls	r1, r3, #9
 800293a:	460b      	mov	r3, r1
 800293c:	4614      	mov	r4, r2
 800293e:	4618      	mov	r0, r3
 8002940:	4621      	mov	r1, r4
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f04f 0400 	mov.w	r4, #0
 8002948:	461a      	mov	r2, r3
 800294a:	4623      	mov	r3, r4
 800294c:	f7fe f8a6 	bl	8000a9c <__aeabi_uldivmod>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e049      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	f04f 0400 	mov.w	r4, #0
 8002962:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	ea03 0501 	and.w	r5, r3, r1
 800296e:	ea04 0602 	and.w	r6, r4, r2
 8002972:	4629      	mov	r1, r5
 8002974:	4632      	mov	r2, r6
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	f04f 0400 	mov.w	r4, #0
 800297e:	0154      	lsls	r4, r2, #5
 8002980:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002984:	014b      	lsls	r3, r1, #5
 8002986:	4619      	mov	r1, r3
 8002988:	4622      	mov	r2, r4
 800298a:	1b49      	subs	r1, r1, r5
 800298c:	eb62 0206 	sbc.w	r2, r2, r6
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	f04f 0400 	mov.w	r4, #0
 8002998:	0194      	lsls	r4, r2, #6
 800299a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800299e:	018b      	lsls	r3, r1, #6
 80029a0:	1a5b      	subs	r3, r3, r1
 80029a2:	eb64 0402 	sbc.w	r4, r4, r2
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	00e2      	lsls	r2, r4, #3
 80029b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029b4:	00d9      	lsls	r1, r3, #3
 80029b6:	460b      	mov	r3, r1
 80029b8:	4614      	mov	r4, r2
 80029ba:	195b      	adds	r3, r3, r5
 80029bc:	eb44 0406 	adc.w	r4, r4, r6
 80029c0:	f04f 0100 	mov.w	r1, #0
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	02a2      	lsls	r2, r4, #10
 80029ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029ce:	0299      	lsls	r1, r3, #10
 80029d0:	460b      	mov	r3, r1
 80029d2:	4614      	mov	r4, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	4621      	mov	r1, r4
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f04f 0400 	mov.w	r4, #0
 80029de:	461a      	mov	r2, r3
 80029e0:	4623      	mov	r3, r4
 80029e2:	f7fe f85b 	bl	8000a9c <__aeabi_uldivmod>
 80029e6:	4603      	mov	r3, r0
 80029e8:	460c      	mov	r4, r1
 80029ea:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x334>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0f1b      	lsrs	r3, r3, #28
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	613b      	str	r3, [r7, #16]
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x338>)
 8002a06:	613b      	str	r3, [r7, #16]
      break;
 8002a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0a:	693b      	ldr	r3, [r7, #16]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	007a1200 	.word	0x007a1200

08002a20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8083 	beq.w	8002b40 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a3a:	4b95      	ldr	r3, [pc, #596]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d019      	beq.n	8002a7a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a46:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a52:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a5e:	d00c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a60:	4b8b      	ldr	r3, [pc, #556]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	d112      	bne.n	8002a92 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6c:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a78:	d10b      	bne.n	8002a92 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d05b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x11e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d157      	bne.n	8002b3e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e216      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x8a>
 8002a9c:	4b7c      	ldr	r3, [pc, #496]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a7b      	ldr	r2, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e01d      	b.n	8002ae6 <HAL_RCC_OscConfig+0xc6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0xae>
 8002ab4:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a72      	ldr	r2, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCC_OscConfig+0xc6>
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d013      	beq.n	8002b16 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fe0b 	bl	8001708 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af6:	f7fe fe07 	bl	8001708 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1db      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b08:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0xd6>
 8002b14:	e014      	b.n	8002b40 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fdf7 	bl	8001708 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fdf3 	bl	8001708 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1c7      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b30:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0xfe>
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d06f      	beq.n	8002c2c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d11c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7c:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d116      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b88:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x180>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e18f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4938      	ldr	r1, [pc, #224]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb4:	e03a      	b.n	8002c2c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbe:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fda0 	bl	8001708 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fd9c 	bl	8001708 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e170      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
 8002bfe:	e015      	b.n	8002c2c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x274>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fd7f 	bl	8001708 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe fd7b 	bl	8001708 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e14f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d037      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d016      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x278>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe fd5f 	bl	8001708 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fd5b 	bl	8001708 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e12f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x22e>
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_OscConfig+0x278>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fd48 	bl	8001708 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fd44 	bl	8001708 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e118      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b8a      	ldr	r3, [pc, #552]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b83      	ldr	r3, [pc, #524]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b7f      	ldr	r3, [pc, #508]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7e      	ldr	r2, [pc, #504]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b79      	ldr	r3, [pc, #484]	; (8002ecc <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fd03 	bl	8001708 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe fcff 	bl	8001708 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e0d3      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x31a>
 8002d2c:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x354>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x33c>
 8002d42:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a60      	ldr	r2, [pc, #384]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5e      	ldr	r3, [pc, #376]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5d      	ldr	r2, [pc, #372]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x354>
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a59      	ldr	r2, [pc, #356]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a56      	ldr	r2, [pc, #344]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fcc4 	bl	8001708 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fcc0 	bl	8001708 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e092      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x364>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe fcae 	bl	8001708 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fcaa 	bl	8001708 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e07c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a3a      	ldr	r2, [pc, #232]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d068      	beq.n	8002ebe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d060      	beq.n	8002eba <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d145      	bne.n	8002e8c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_RCC_OscConfig+0x4b0>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe fc7f 	bl	8001708 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fe fc7b 	bl	8001708 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e04f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e20:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	019b      	lsls	r3, r3, #6
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	3b01      	subs	r3, #1
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	071b      	lsls	r3, r3, #28
 8002e58:	491b      	ldr	r1, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_RCC_OscConfig+0x4b0>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fc50 	bl	8001708 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fc4c 	bl	8001708 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e020      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x44c>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_RCC_OscConfig+0x4b0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe fc39 	bl	8001708 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe fc35 	bl	8001708 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x4a8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x47a>
 8002eb8:	e001      	b.n	8002ebe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42470060 	.word	0x42470060

08002ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01d      	b.n	8002f22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fa40 	bl	8001380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 f90e 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb48 	bl	80035d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_TIM_PWM_Start+0x74>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_TIM_PWM_Start+0x2c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_TIM_PWM_Start+0x78>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_PWM_Start+0x30>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_TIM_PWM_Start+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d007      	beq.n	8002f94 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e0b4      	b.n	800312c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	f200 809f 	bhi.w	8003118 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	08003119 	.word	0x08003119
 8002fe8:	08003119 	.word	0x08003119
 8002fec:	08003119 	.word	0x08003119
 8002ff0:	08003055 	.word	0x08003055
 8002ff4:	08003119 	.word	0x08003119
 8002ff8:	08003119 	.word	0x08003119
 8002ffc:	08003119 	.word	0x08003119
 8003000:	08003097 	.word	0x08003097
 8003004:	08003119 	.word	0x08003119
 8003008:	08003119 	.word	0x08003119
 800300c:	08003119 	.word	0x08003119
 8003010:	080030d7 	.word	0x080030d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f92a 	bl	8003274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6999      	ldr	r1, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	619a      	str	r2, [r3, #24]
      break;
 8003052:	e062      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f97a 	bl	8003354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6999      	ldr	r1, [r3, #24]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	021a      	lsls	r2, r3, #8
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
      break;
 8003094:	e041      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f9cf 	bl	8003440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0208 	orr.w	r2, r2, #8
 80030b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69da      	ldr	r2, [r3, #28]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0204 	bic.w	r2, r2, #4
 80030c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69d9      	ldr	r1, [r3, #28]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
      break;
 80030d4:	e021      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fa23 	bl	8003528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69d9      	ldr	r1, [r3, #28]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	021a      	lsls	r2, r3, #8
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	61da      	str	r2, [r3, #28]
      break;
 8003116:	e000      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003118:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a40      	ldr	r2, [pc, #256]	; (8003248 <TIM_Base_SetConfig+0x114>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d00f      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3d      	ldr	r2, [pc, #244]	; (800324c <TIM_Base_SetConfig+0x118>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00b      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3c      	ldr	r2, [pc, #240]	; (8003250 <TIM_Base_SetConfig+0x11c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3b      	ldr	r2, [pc, #236]	; (8003254 <TIM_Base_SetConfig+0x120>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3a      	ldr	r2, [pc, #232]	; (8003258 <TIM_Base_SetConfig+0x124>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2f      	ldr	r2, [pc, #188]	; (8003248 <TIM_Base_SetConfig+0x114>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d027      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2c      	ldr	r2, [pc, #176]	; (800324c <TIM_Base_SetConfig+0x118>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d023      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <TIM_Base_SetConfig+0x11c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01f      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <TIM_Base_SetConfig+0x120>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <TIM_Base_SetConfig+0x124>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d017      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a28      	ldr	r2, [pc, #160]	; (800325c <TIM_Base_SetConfig+0x128>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a27      	ldr	r2, [pc, #156]	; (8003260 <TIM_Base_SetConfig+0x12c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <TIM_Base_SetConfig+0x130>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a25      	ldr	r2, [pc, #148]	; (8003268 <TIM_Base_SetConfig+0x134>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a24      	ldr	r2, [pc, #144]	; (800326c <TIM_Base_SetConfig+0x138>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a23      	ldr	r2, [pc, #140]	; (8003270 <TIM_Base_SetConfig+0x13c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <TIM_Base_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0xf8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <TIM_Base_SetConfig+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00
 8003258:	40010400 	.word	0x40010400
 800325c:	40014000 	.word	0x40014000
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800
 8003268:	40001800 	.word	0x40001800
 800326c:	40001c00 	.word	0x40001c00
 8003270:	40002000 	.word	0x40002000

08003274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f023 0201 	bic.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f023 0302 	bic.w	r3, r3, #2
 80032bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a20      	ldr	r2, [pc, #128]	; (800334c <TIM_OC1_SetConfig+0xd8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_OC1_SetConfig+0x64>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <TIM_OC1_SetConfig+0xdc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10c      	bne.n	80032f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0308 	bic.w	r3, r3, #8
 80032de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <TIM_OC1_SetConfig+0xd8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_OC1_SetConfig+0x8e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a14      	ldr	r2, [pc, #80]	; (8003350 <TIM_OC1_SetConfig+0xdc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	621a      	str	r2, [r3, #32]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40010000 	.word	0x40010000
 8003350:	40010400 	.word	0x40010400

08003354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f023 0210 	bic.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 0320 	bic.w	r3, r3, #32
 800339e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a22      	ldr	r2, [pc, #136]	; (8003438 <TIM_OC2_SetConfig+0xe4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC2_SetConfig+0x68>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <TIM_OC2_SetConfig+0xe8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10d      	bne.n	80033d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <TIM_OC2_SetConfig+0xe4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC2_SetConfig+0x94>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <TIM_OC2_SetConfig+0xe8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d113      	bne.n	8003410 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40010400 	.word	0x40010400

08003440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a21      	ldr	r2, [pc, #132]	; (8003520 <TIM_OC3_SetConfig+0xe0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_OC3_SetConfig+0x66>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a20      	ldr	r2, [pc, #128]	; (8003524 <TIM_OC3_SetConfig+0xe4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10d      	bne.n	80034c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <TIM_OC3_SetConfig+0xe0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_OC3_SetConfig+0x92>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <TIM_OC3_SetConfig+0xe4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40010000 	.word	0x40010000
 8003524:	40010400 	.word	0x40010400

08003528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	031b      	lsls	r3, r3, #12
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <TIM_OC4_SetConfig+0xa4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC4_SetConfig+0x68>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a11      	ldr	r2, [pc, #68]	; (80035d0 <TIM_OC4_SetConfig+0xa8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40010400 	.word	0x40010400

080035d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2201      	movs	r2, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	401a      	ands	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e05a      	b.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003684:	d01d      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10c      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40010400 	.word	0x40010400
 8003710:	40014000 	.word	0x40014000
 8003714:	40001800 	.word	0x40001800

08003718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e03f      	b.n	80037aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd fe9a 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f90b 	bl	8003978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b088      	sub	sp, #32
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	f040 8083 	bne.w	80038da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Transmit+0x2e>
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e07b      	b.n	80038dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Transmit+0x40>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e074      	b.n	80038dc <HAL_UART_Transmit+0x12a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2221      	movs	r2, #33	; 0x21
 8003804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003808:	f7fd ff7e 	bl	8001708 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003822:	e042      	b.n	80038aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	d122      	bne.n	8003882 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2200      	movs	r2, #0
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f84c 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e042      	b.n	80038dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003868:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3302      	adds	r3, #2
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e017      	b.n	80038aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3301      	adds	r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	e013      	b.n	80038aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f829 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e01f      	b.n	80038dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	60ba      	str	r2, [r7, #8]
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1b7      	bne.n	8003824 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2200      	movs	r2, #0
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f810 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e006      	b.n	80038dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f4:	e02c      	b.n	8003950 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d028      	beq.n	8003950 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <UART_WaitOnFlagUntilTimeout+0x30>
 8003904:	f7fd ff00 	bl	8001708 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	429a      	cmp	r2, r3
 8003912:	d21d      	bcs.n	8003950 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003922:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e00f      	b.n	8003970 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	429a      	cmp	r2, r3
 800396c:	d0c3      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039ba:	f023 030c 	bic.w	r3, r3, #12
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e6:	f040 818b 	bne.w	8003d00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4ac1      	ldr	r2, [pc, #772]	; (8003cf4 <UART_SetConfig+0x37c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d005      	beq.n	8003a00 <UART_SetConfig+0x88>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4abf      	ldr	r2, [pc, #764]	; (8003cf8 <UART_SetConfig+0x380>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f040 80bd 	bne.w	8003b7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe fe5a 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003a04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	461d      	mov	r5, r3
 8003a0a:	f04f 0600 	mov.w	r6, #0
 8003a0e:	46a8      	mov	r8, r5
 8003a10:	46b1      	mov	r9, r6
 8003a12:	eb18 0308 	adds.w	r3, r8, r8
 8003a16:	eb49 0409 	adc.w	r4, r9, r9
 8003a1a:	4698      	mov	r8, r3
 8003a1c:	46a1      	mov	r9, r4
 8003a1e:	eb18 0805 	adds.w	r8, r8, r5
 8003a22:	eb49 0906 	adc.w	r9, r9, r6
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a3a:	4688      	mov	r8, r1
 8003a3c:	4691      	mov	r9, r2
 8003a3e:	eb18 0005 	adds.w	r0, r8, r5
 8003a42:	eb49 0106 	adc.w	r1, r9, r6
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	f04f 0600 	mov.w	r6, #0
 8003a50:	196b      	adds	r3, r5, r5
 8003a52:	eb46 0406 	adc.w	r4, r6, r6
 8003a56:	461a      	mov	r2, r3
 8003a58:	4623      	mov	r3, r4
 8003a5a:	f7fd f81f 	bl	8000a9c <__aeabi_uldivmod>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	461a      	mov	r2, r3
 8003a64:	4ba5      	ldr	r3, [pc, #660]	; (8003cfc <UART_SetConfig+0x384>)
 8003a66:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	461d      	mov	r5, r3
 8003a74:	f04f 0600 	mov.w	r6, #0
 8003a78:	46a9      	mov	r9, r5
 8003a7a:	46b2      	mov	sl, r6
 8003a7c:	eb19 0309 	adds.w	r3, r9, r9
 8003a80:	eb4a 040a 	adc.w	r4, sl, sl
 8003a84:	4699      	mov	r9, r3
 8003a86:	46a2      	mov	sl, r4
 8003a88:	eb19 0905 	adds.w	r9, r9, r5
 8003a8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a90:	f04f 0100 	mov.w	r1, #0
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aa4:	4689      	mov	r9, r1
 8003aa6:	4692      	mov	sl, r2
 8003aa8:	eb19 0005 	adds.w	r0, r9, r5
 8003aac:	eb4a 0106 	adc.w	r1, sl, r6
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	461d      	mov	r5, r3
 8003ab6:	f04f 0600 	mov.w	r6, #0
 8003aba:	196b      	adds	r3, r5, r5
 8003abc:	eb46 0406 	adc.w	r4, r6, r6
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	f7fc ffea 	bl	8000a9c <__aeabi_uldivmod>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	460c      	mov	r4, r1
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <UART_SetConfig+0x384>)
 8003ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	2164      	movs	r1, #100	; 0x64
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	3332      	adds	r3, #50	; 0x32
 8003ae2:	4a86      	ldr	r2, [pc, #536]	; (8003cfc <UART_SetConfig+0x384>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003af0:	4498      	add	r8, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	461d      	mov	r5, r3
 8003af6:	f04f 0600 	mov.w	r6, #0
 8003afa:	46a9      	mov	r9, r5
 8003afc:	46b2      	mov	sl, r6
 8003afe:	eb19 0309 	adds.w	r3, r9, r9
 8003b02:	eb4a 040a 	adc.w	r4, sl, sl
 8003b06:	4699      	mov	r9, r3
 8003b08:	46a2      	mov	sl, r4
 8003b0a:	eb19 0905 	adds.w	r9, r9, r5
 8003b0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b26:	4689      	mov	r9, r1
 8003b28:	4692      	mov	sl, r2
 8003b2a:	eb19 0005 	adds.w	r0, r9, r5
 8003b2e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	461d      	mov	r5, r3
 8003b38:	f04f 0600 	mov.w	r6, #0
 8003b3c:	196b      	adds	r3, r5, r5
 8003b3e:	eb46 0406 	adc.w	r4, r6, r6
 8003b42:	461a      	mov	r2, r3
 8003b44:	4623      	mov	r3, r4
 8003b46:	f7fc ffa9 	bl	8000a9c <__aeabi_uldivmod>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <UART_SetConfig+0x384>)
 8003b52:	fba3 1302 	umull	r1, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2164      	movs	r1, #100	; 0x64
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	3332      	adds	r3, #50	; 0x32
 8003b64:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <UART_SetConfig+0x384>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	f003 0207 	and.w	r2, r3, #7
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4442      	add	r2, r8
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	e26f      	b.n	800405a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b7a:	f7fe fd89 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003b7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	461d      	mov	r5, r3
 8003b84:	f04f 0600 	mov.w	r6, #0
 8003b88:	46a8      	mov	r8, r5
 8003b8a:	46b1      	mov	r9, r6
 8003b8c:	eb18 0308 	adds.w	r3, r8, r8
 8003b90:	eb49 0409 	adc.w	r4, r9, r9
 8003b94:	4698      	mov	r8, r3
 8003b96:	46a1      	mov	r9, r4
 8003b98:	eb18 0805 	adds.w	r8, r8, r5
 8003b9c:	eb49 0906 	adc.w	r9, r9, r6
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bb4:	4688      	mov	r8, r1
 8003bb6:	4691      	mov	r9, r2
 8003bb8:	eb18 0005 	adds.w	r0, r8, r5
 8003bbc:	eb49 0106 	adc.w	r1, r9, r6
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	461d      	mov	r5, r3
 8003bc6:	f04f 0600 	mov.w	r6, #0
 8003bca:	196b      	adds	r3, r5, r5
 8003bcc:	eb46 0406 	adc.w	r4, r6, r6
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	f7fc ff62 	bl	8000a9c <__aeabi_uldivmod>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <UART_SetConfig+0x384>)
 8003be0:	fba3 2302 	umull	r2, r3, r3, r2
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	461d      	mov	r5, r3
 8003bee:	f04f 0600 	mov.w	r6, #0
 8003bf2:	46a9      	mov	r9, r5
 8003bf4:	46b2      	mov	sl, r6
 8003bf6:	eb19 0309 	adds.w	r3, r9, r9
 8003bfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003bfe:	4699      	mov	r9, r3
 8003c00:	46a2      	mov	sl, r4
 8003c02:	eb19 0905 	adds.w	r9, r9, r5
 8003c06:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c1e:	4689      	mov	r9, r1
 8003c20:	4692      	mov	sl, r2
 8003c22:	eb19 0005 	adds.w	r0, r9, r5
 8003c26:	eb4a 0106 	adc.w	r1, sl, r6
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	461d      	mov	r5, r3
 8003c30:	f04f 0600 	mov.w	r6, #0
 8003c34:	196b      	adds	r3, r5, r5
 8003c36:	eb46 0406 	adc.w	r4, r6, r6
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	f7fc ff2d 	bl	8000a9c <__aeabi_uldivmod>
 8003c42:	4603      	mov	r3, r0
 8003c44:	460c      	mov	r4, r1
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <UART_SetConfig+0x384>)
 8003c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2164      	movs	r1, #100	; 0x64
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <UART_SetConfig+0x384>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c6a:	4498      	add	r8, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	461d      	mov	r5, r3
 8003c70:	f04f 0600 	mov.w	r6, #0
 8003c74:	46a9      	mov	r9, r5
 8003c76:	46b2      	mov	sl, r6
 8003c78:	eb19 0309 	adds.w	r3, r9, r9
 8003c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c80:	4699      	mov	r9, r3
 8003c82:	46a2      	mov	sl, r4
 8003c84:	eb19 0905 	adds.w	r9, r9, r5
 8003c88:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ca0:	4689      	mov	r9, r1
 8003ca2:	4692      	mov	sl, r2
 8003ca4:	eb19 0005 	adds.w	r0, r9, r5
 8003ca8:	eb4a 0106 	adc.w	r1, sl, r6
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	461d      	mov	r5, r3
 8003cb2:	f04f 0600 	mov.w	r6, #0
 8003cb6:	196b      	adds	r3, r5, r5
 8003cb8:	eb46 0406 	adc.w	r4, r6, r6
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	f7fc feec 	bl	8000a9c <__aeabi_uldivmod>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <UART_SetConfig+0x384>)
 8003ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	2164      	movs	r1, #100	; 0x64
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	3332      	adds	r3, #50	; 0x32
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <UART_SetConfig+0x384>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	f003 0207 	and.w	r2, r3, #7
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4442      	add	r2, r8
 8003cf0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cf2:	e1b2      	b.n	800405a <UART_SetConfig+0x6e2>
 8003cf4:	40011000 	.word	0x40011000
 8003cf8:	40011400 	.word	0x40011400
 8003cfc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4ad7      	ldr	r2, [pc, #860]	; (8004064 <UART_SetConfig+0x6ec>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d005      	beq.n	8003d16 <UART_SetConfig+0x39e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4ad6      	ldr	r2, [pc, #856]	; (8004068 <UART_SetConfig+0x6f0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	f040 80d1 	bne.w	8003eb8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d16:	f7fe fccf 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003d1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	469a      	mov	sl, r3
 8003d20:	f04f 0b00 	mov.w	fp, #0
 8003d24:	46d0      	mov	r8, sl
 8003d26:	46d9      	mov	r9, fp
 8003d28:	eb18 0308 	adds.w	r3, r8, r8
 8003d2c:	eb49 0409 	adc.w	r4, r9, r9
 8003d30:	4698      	mov	r8, r3
 8003d32:	46a1      	mov	r9, r4
 8003d34:	eb18 080a 	adds.w	r8, r8, sl
 8003d38:	eb49 090b 	adc.w	r9, r9, fp
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d50:	4688      	mov	r8, r1
 8003d52:	4691      	mov	r9, r2
 8003d54:	eb1a 0508 	adds.w	r5, sl, r8
 8003d58:	eb4b 0609 	adc.w	r6, fp, r9
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	f04f 0400 	mov.w	r4, #0
 8003d6e:	0094      	lsls	r4, r2, #2
 8003d70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d74:	008b      	lsls	r3, r1, #2
 8003d76:	461a      	mov	r2, r3
 8003d78:	4623      	mov	r3, r4
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	f7fc fe8d 	bl	8000a9c <__aeabi_uldivmod>
 8003d82:	4603      	mov	r3, r0
 8003d84:	460c      	mov	r4, r1
 8003d86:	461a      	mov	r2, r3
 8003d88:	4bb8      	ldr	r3, [pc, #736]	; (800406c <UART_SetConfig+0x6f4>)
 8003d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	469b      	mov	fp, r3
 8003d98:	f04f 0c00 	mov.w	ip, #0
 8003d9c:	46d9      	mov	r9, fp
 8003d9e:	46e2      	mov	sl, ip
 8003da0:	eb19 0309 	adds.w	r3, r9, r9
 8003da4:	eb4a 040a 	adc.w	r4, sl, sl
 8003da8:	4699      	mov	r9, r3
 8003daa:	46a2      	mov	sl, r4
 8003dac:	eb19 090b 	adds.w	r9, r9, fp
 8003db0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc8:	4689      	mov	r9, r1
 8003dca:	4692      	mov	sl, r2
 8003dcc:	eb1b 0509 	adds.w	r5, fp, r9
 8003dd0:	eb4c 060a 	adc.w	r6, ip, sl
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	f04f 0400 	mov.w	r4, #0
 8003de6:	0094      	lsls	r4, r2, #2
 8003de8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dec:	008b      	lsls	r3, r1, #2
 8003dee:	461a      	mov	r2, r3
 8003df0:	4623      	mov	r3, r4
 8003df2:	4628      	mov	r0, r5
 8003df4:	4631      	mov	r1, r6
 8003df6:	f7fc fe51 	bl	8000a9c <__aeabi_uldivmod>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b9a      	ldr	r3, [pc, #616]	; (800406c <UART_SetConfig+0x6f4>)
 8003e02:	fba3 1302 	umull	r1, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2164      	movs	r1, #100	; 0x64
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	3332      	adds	r3, #50	; 0x32
 8003e14:	4a95      	ldr	r2, [pc, #596]	; (800406c <UART_SetConfig+0x6f4>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e20:	4498      	add	r8, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	469b      	mov	fp, r3
 8003e26:	f04f 0c00 	mov.w	ip, #0
 8003e2a:	46d9      	mov	r9, fp
 8003e2c:	46e2      	mov	sl, ip
 8003e2e:	eb19 0309 	adds.w	r3, r9, r9
 8003e32:	eb4a 040a 	adc.w	r4, sl, sl
 8003e36:	4699      	mov	r9, r3
 8003e38:	46a2      	mov	sl, r4
 8003e3a:	eb19 090b 	adds.w	r9, r9, fp
 8003e3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e56:	4689      	mov	r9, r1
 8003e58:	4692      	mov	sl, r2
 8003e5a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e5e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4619      	mov	r1, r3
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	f04f 0400 	mov.w	r4, #0
 8003e74:	0094      	lsls	r4, r2, #2
 8003e76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e7a:	008b      	lsls	r3, r1, #2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4623      	mov	r3, r4
 8003e80:	4628      	mov	r0, r5
 8003e82:	4631      	mov	r1, r6
 8003e84:	f7fc fe0a 	bl	8000a9c <__aeabi_uldivmod>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b77      	ldr	r3, [pc, #476]	; (800406c <UART_SetConfig+0x6f4>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	2164      	movs	r1, #100	; 0x64
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	3332      	adds	r3, #50	; 0x32
 8003ea2:	4a72      	ldr	r2, [pc, #456]	; (800406c <UART_SetConfig+0x6f4>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4442      	add	r2, r8
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	e0d0      	b.n	800405a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe fbea 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	469a      	mov	sl, r3
 8003ec2:	f04f 0b00 	mov.w	fp, #0
 8003ec6:	46d0      	mov	r8, sl
 8003ec8:	46d9      	mov	r9, fp
 8003eca:	eb18 0308 	adds.w	r3, r8, r8
 8003ece:	eb49 0409 	adc.w	r4, r9, r9
 8003ed2:	4698      	mov	r8, r3
 8003ed4:	46a1      	mov	r9, r4
 8003ed6:	eb18 080a 	adds.w	r8, r8, sl
 8003eda:	eb49 090b 	adc.w	r9, r9, fp
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef2:	4688      	mov	r8, r1
 8003ef4:	4691      	mov	r9, r2
 8003ef6:	eb1a 0508 	adds.w	r5, sl, r8
 8003efa:	eb4b 0609 	adc.w	r6, fp, r9
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	0094      	lsls	r4, r2, #2
 8003f12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f16:	008b      	lsls	r3, r1, #2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	4631      	mov	r1, r6
 8003f20:	f7fc fdbc 	bl	8000a9c <__aeabi_uldivmod>
 8003f24:	4603      	mov	r3, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b50      	ldr	r3, [pc, #320]	; (800406c <UART_SetConfig+0x6f4>)
 8003f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	469b      	mov	fp, r3
 8003f3a:	f04f 0c00 	mov.w	ip, #0
 8003f3e:	46d9      	mov	r9, fp
 8003f40:	46e2      	mov	sl, ip
 8003f42:	eb19 0309 	adds.w	r3, r9, r9
 8003f46:	eb4a 040a 	adc.w	r4, sl, sl
 8003f4a:	4699      	mov	r9, r3
 8003f4c:	46a2      	mov	sl, r4
 8003f4e:	eb19 090b 	adds.w	r9, r9, fp
 8003f52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f6a:	4689      	mov	r9, r1
 8003f6c:	4692      	mov	sl, r2
 8003f6e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f72:	eb4c 060a 	adc.w	r6, ip, sl
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	f04f 0400 	mov.w	r4, #0
 8003f88:	0094      	lsls	r4, r2, #2
 8003f8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f8e:	008b      	lsls	r3, r1, #2
 8003f90:	461a      	mov	r2, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	4628      	mov	r0, r5
 8003f96:	4631      	mov	r1, r6
 8003f98:	f7fc fd80 	bl	8000a9c <__aeabi_uldivmod>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b32      	ldr	r3, [pc, #200]	; (800406c <UART_SetConfig+0x6f4>)
 8003fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	3332      	adds	r3, #50	; 0x32
 8003fb6:	4a2d      	ldr	r2, [pc, #180]	; (800406c <UART_SetConfig+0x6f4>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc2:	4498      	add	r8, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	469b      	mov	fp, r3
 8003fc8:	f04f 0c00 	mov.w	ip, #0
 8003fcc:	46d9      	mov	r9, fp
 8003fce:	46e2      	mov	sl, ip
 8003fd0:	eb19 0309 	adds.w	r3, r9, r9
 8003fd4:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd8:	4699      	mov	r9, r3
 8003fda:	46a2      	mov	sl, r4
 8003fdc:	eb19 090b 	adds.w	r9, r9, fp
 8003fe0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fe4:	f04f 0100 	mov.w	r1, #0
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ff0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ff4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff8:	4689      	mov	r9, r1
 8003ffa:	4692      	mov	sl, r2
 8003ffc:	eb1b 0509 	adds.w	r5, fp, r9
 8004000:	eb4c 060a 	adc.w	r6, ip, sl
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	f04f 0400 	mov.w	r4, #0
 8004016:	0094      	lsls	r4, r2, #2
 8004018:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800401c:	008b      	lsls	r3, r1, #2
 800401e:	461a      	mov	r2, r3
 8004020:	4623      	mov	r3, r4
 8004022:	4628      	mov	r0, r5
 8004024:	4631      	mov	r1, r6
 8004026:	f7fc fd39 	bl	8000a9c <__aeabi_uldivmod>
 800402a:	4603      	mov	r3, r0
 800402c:	460c      	mov	r4, r1
 800402e:	461a      	mov	r2, r3
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <UART_SetConfig+0x6f4>)
 8004032:	fba3 1302 	umull	r1, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2164      	movs	r1, #100	; 0x64
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	3332      	adds	r3, #50	; 0x32
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <UART_SetConfig+0x6f4>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4442      	add	r2, r8
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	e7ff      	b.n	800405a <UART_SetConfig+0x6e2>
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004064:	40011000 	.word	0x40011000
 8004068:	40011400 	.word	0x40011400
 800406c:	51eb851f 	.word	0x51eb851f

08004070 <__errno>:
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <__errno+0x8>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	2000000c 	.word	0x2000000c

0800407c <__libc_init_array>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4e0d      	ldr	r6, [pc, #52]	; (80040b4 <__libc_init_array+0x38>)
 8004080:	4c0d      	ldr	r4, [pc, #52]	; (80040b8 <__libc_init_array+0x3c>)
 8004082:	1ba4      	subs	r4, r4, r6
 8004084:	10a4      	asrs	r4, r4, #2
 8004086:	2500      	movs	r5, #0
 8004088:	42a5      	cmp	r5, r4
 800408a:	d109      	bne.n	80040a0 <__libc_init_array+0x24>
 800408c:	4e0b      	ldr	r6, [pc, #44]	; (80040bc <__libc_init_array+0x40>)
 800408e:	4c0c      	ldr	r4, [pc, #48]	; (80040c0 <__libc_init_array+0x44>)
 8004090:	f000 fc26 	bl	80048e0 <_init>
 8004094:	1ba4      	subs	r4, r4, r6
 8004096:	10a4      	asrs	r4, r4, #2
 8004098:	2500      	movs	r5, #0
 800409a:	42a5      	cmp	r5, r4
 800409c:	d105      	bne.n	80040aa <__libc_init_array+0x2e>
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040a4:	4798      	blx	r3
 80040a6:	3501      	adds	r5, #1
 80040a8:	e7ee      	b.n	8004088 <__libc_init_array+0xc>
 80040aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ae:	4798      	blx	r3
 80040b0:	3501      	adds	r5, #1
 80040b2:	e7f2      	b.n	800409a <__libc_init_array+0x1e>
 80040b4:	08004960 	.word	0x08004960
 80040b8:	08004960 	.word	0x08004960
 80040bc:	08004960 	.word	0x08004960
 80040c0:	08004964 	.word	0x08004964

080040c4 <memset>:
 80040c4:	4402      	add	r2, r0
 80040c6:	4603      	mov	r3, r0
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d100      	bne.n	80040ce <memset+0xa>
 80040cc:	4770      	bx	lr
 80040ce:	f803 1b01 	strb.w	r1, [r3], #1
 80040d2:	e7f9      	b.n	80040c8 <memset+0x4>

080040d4 <siprintf>:
 80040d4:	b40e      	push	{r1, r2, r3}
 80040d6:	b500      	push	{lr}
 80040d8:	b09c      	sub	sp, #112	; 0x70
 80040da:	ab1d      	add	r3, sp, #116	; 0x74
 80040dc:	9002      	str	r0, [sp, #8]
 80040de:	9006      	str	r0, [sp, #24]
 80040e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040e4:	4809      	ldr	r0, [pc, #36]	; (800410c <siprintf+0x38>)
 80040e6:	9107      	str	r1, [sp, #28]
 80040e8:	9104      	str	r1, [sp, #16]
 80040ea:	4909      	ldr	r1, [pc, #36]	; (8004110 <siprintf+0x3c>)
 80040ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f0:	9105      	str	r1, [sp, #20]
 80040f2:	6800      	ldr	r0, [r0, #0]
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	a902      	add	r1, sp, #8
 80040f8:	f000 f866 	bl	80041c8 <_svfiprintf_r>
 80040fc:	9b02      	ldr	r3, [sp, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	b01c      	add	sp, #112	; 0x70
 8004104:	f85d eb04 	ldr.w	lr, [sp], #4
 8004108:	b003      	add	sp, #12
 800410a:	4770      	bx	lr
 800410c:	2000000c 	.word	0x2000000c
 8004110:	ffff0208 	.word	0xffff0208

08004114 <__ssputs_r>:
 8004114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	688e      	ldr	r6, [r1, #8]
 800411a:	429e      	cmp	r6, r3
 800411c:	4682      	mov	sl, r0
 800411e:	460c      	mov	r4, r1
 8004120:	4690      	mov	r8, r2
 8004122:	4699      	mov	r9, r3
 8004124:	d837      	bhi.n	8004196 <__ssputs_r+0x82>
 8004126:	898a      	ldrh	r2, [r1, #12]
 8004128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800412c:	d031      	beq.n	8004192 <__ssputs_r+0x7e>
 800412e:	6825      	ldr	r5, [r4, #0]
 8004130:	6909      	ldr	r1, [r1, #16]
 8004132:	1a6f      	subs	r7, r5, r1
 8004134:	6965      	ldr	r5, [r4, #20]
 8004136:	2302      	movs	r3, #2
 8004138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800413c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004140:	f109 0301 	add.w	r3, r9, #1
 8004144:	443b      	add	r3, r7
 8004146:	429d      	cmp	r5, r3
 8004148:	bf38      	it	cc
 800414a:	461d      	movcc	r5, r3
 800414c:	0553      	lsls	r3, r2, #21
 800414e:	d530      	bpl.n	80041b2 <__ssputs_r+0x9e>
 8004150:	4629      	mov	r1, r5
 8004152:	f000 fb2b 	bl	80047ac <_malloc_r>
 8004156:	4606      	mov	r6, r0
 8004158:	b950      	cbnz	r0, 8004170 <__ssputs_r+0x5c>
 800415a:	230c      	movs	r3, #12
 800415c:	f8ca 3000 	str.w	r3, [sl]
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004170:	463a      	mov	r2, r7
 8004172:	6921      	ldr	r1, [r4, #16]
 8004174:	f000 faa8 	bl	80046c8 <memcpy>
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800417e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004182:	81a3      	strh	r3, [r4, #12]
 8004184:	6126      	str	r6, [r4, #16]
 8004186:	6165      	str	r5, [r4, #20]
 8004188:	443e      	add	r6, r7
 800418a:	1bed      	subs	r5, r5, r7
 800418c:	6026      	str	r6, [r4, #0]
 800418e:	60a5      	str	r5, [r4, #8]
 8004190:	464e      	mov	r6, r9
 8004192:	454e      	cmp	r6, r9
 8004194:	d900      	bls.n	8004198 <__ssputs_r+0x84>
 8004196:	464e      	mov	r6, r9
 8004198:	4632      	mov	r2, r6
 800419a:	4641      	mov	r1, r8
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	f000 fa9e 	bl	80046de <memmove>
 80041a2:	68a3      	ldr	r3, [r4, #8]
 80041a4:	1b9b      	subs	r3, r3, r6
 80041a6:	60a3      	str	r3, [r4, #8]
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	441e      	add	r6, r3
 80041ac:	6026      	str	r6, [r4, #0]
 80041ae:	2000      	movs	r0, #0
 80041b0:	e7dc      	b.n	800416c <__ssputs_r+0x58>
 80041b2:	462a      	mov	r2, r5
 80041b4:	f000 fb54 	bl	8004860 <_realloc_r>
 80041b8:	4606      	mov	r6, r0
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d1e2      	bne.n	8004184 <__ssputs_r+0x70>
 80041be:	6921      	ldr	r1, [r4, #16]
 80041c0:	4650      	mov	r0, sl
 80041c2:	f000 faa5 	bl	8004710 <_free_r>
 80041c6:	e7c8      	b.n	800415a <__ssputs_r+0x46>

080041c8 <_svfiprintf_r>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	461d      	mov	r5, r3
 80041ce:	898b      	ldrh	r3, [r1, #12]
 80041d0:	061f      	lsls	r7, r3, #24
 80041d2:	b09d      	sub	sp, #116	; 0x74
 80041d4:	4680      	mov	r8, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	4616      	mov	r6, r2
 80041da:	d50f      	bpl.n	80041fc <_svfiprintf_r+0x34>
 80041dc:	690b      	ldr	r3, [r1, #16]
 80041de:	b96b      	cbnz	r3, 80041fc <_svfiprintf_r+0x34>
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	f000 fae3 	bl	80047ac <_malloc_r>
 80041e6:	6020      	str	r0, [r4, #0]
 80041e8:	6120      	str	r0, [r4, #16]
 80041ea:	b928      	cbnz	r0, 80041f8 <_svfiprintf_r+0x30>
 80041ec:	230c      	movs	r3, #12
 80041ee:	f8c8 3000 	str.w	r3, [r8]
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295
 80041f6:	e0c8      	b.n	800438a <_svfiprintf_r+0x1c2>
 80041f8:	2340      	movs	r3, #64	; 0x40
 80041fa:	6163      	str	r3, [r4, #20]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004200:	2320      	movs	r3, #32
 8004202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004206:	2330      	movs	r3, #48	; 0x30
 8004208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800420c:	9503      	str	r5, [sp, #12]
 800420e:	f04f 0b01 	mov.w	fp, #1
 8004212:	4637      	mov	r7, r6
 8004214:	463d      	mov	r5, r7
 8004216:	f815 3b01 	ldrb.w	r3, [r5], #1
 800421a:	b10b      	cbz	r3, 8004220 <_svfiprintf_r+0x58>
 800421c:	2b25      	cmp	r3, #37	; 0x25
 800421e:	d13e      	bne.n	800429e <_svfiprintf_r+0xd6>
 8004220:	ebb7 0a06 	subs.w	sl, r7, r6
 8004224:	d00b      	beq.n	800423e <_svfiprintf_r+0x76>
 8004226:	4653      	mov	r3, sl
 8004228:	4632      	mov	r2, r6
 800422a:	4621      	mov	r1, r4
 800422c:	4640      	mov	r0, r8
 800422e:	f7ff ff71 	bl	8004114 <__ssputs_r>
 8004232:	3001      	adds	r0, #1
 8004234:	f000 80a4 	beq.w	8004380 <_svfiprintf_r+0x1b8>
 8004238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800423a:	4453      	add	r3, sl
 800423c:	9309      	str	r3, [sp, #36]	; 0x24
 800423e:	783b      	ldrb	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 809d 	beq.w	8004380 <_svfiprintf_r+0x1b8>
 8004246:	2300      	movs	r3, #0
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	9307      	str	r3, [sp, #28]
 8004254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004258:	931a      	str	r3, [sp, #104]	; 0x68
 800425a:	462f      	mov	r7, r5
 800425c:	2205      	movs	r2, #5
 800425e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004262:	4850      	ldr	r0, [pc, #320]	; (80043a4 <_svfiprintf_r+0x1dc>)
 8004264:	f7fb ffdc 	bl	8000220 <memchr>
 8004268:	9b04      	ldr	r3, [sp, #16]
 800426a:	b9d0      	cbnz	r0, 80042a2 <_svfiprintf_r+0xda>
 800426c:	06d9      	lsls	r1, r3, #27
 800426e:	bf44      	itt	mi
 8004270:	2220      	movmi	r2, #32
 8004272:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004276:	071a      	lsls	r2, r3, #28
 8004278:	bf44      	itt	mi
 800427a:	222b      	movmi	r2, #43	; 0x2b
 800427c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004280:	782a      	ldrb	r2, [r5, #0]
 8004282:	2a2a      	cmp	r2, #42	; 0x2a
 8004284:	d015      	beq.n	80042b2 <_svfiprintf_r+0xea>
 8004286:	9a07      	ldr	r2, [sp, #28]
 8004288:	462f      	mov	r7, r5
 800428a:	2000      	movs	r0, #0
 800428c:	250a      	movs	r5, #10
 800428e:	4639      	mov	r1, r7
 8004290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004294:	3b30      	subs	r3, #48	; 0x30
 8004296:	2b09      	cmp	r3, #9
 8004298:	d94d      	bls.n	8004336 <_svfiprintf_r+0x16e>
 800429a:	b1b8      	cbz	r0, 80042cc <_svfiprintf_r+0x104>
 800429c:	e00f      	b.n	80042be <_svfiprintf_r+0xf6>
 800429e:	462f      	mov	r7, r5
 80042a0:	e7b8      	b.n	8004214 <_svfiprintf_r+0x4c>
 80042a2:	4a40      	ldr	r2, [pc, #256]	; (80043a4 <_svfiprintf_r+0x1dc>)
 80042a4:	1a80      	subs	r0, r0, r2
 80042a6:	fa0b f000 	lsl.w	r0, fp, r0
 80042aa:	4318      	orrs	r0, r3
 80042ac:	9004      	str	r0, [sp, #16]
 80042ae:	463d      	mov	r5, r7
 80042b0:	e7d3      	b.n	800425a <_svfiprintf_r+0x92>
 80042b2:	9a03      	ldr	r2, [sp, #12]
 80042b4:	1d11      	adds	r1, r2, #4
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	9103      	str	r1, [sp, #12]
 80042ba:	2a00      	cmp	r2, #0
 80042bc:	db01      	blt.n	80042c2 <_svfiprintf_r+0xfa>
 80042be:	9207      	str	r2, [sp, #28]
 80042c0:	e004      	b.n	80042cc <_svfiprintf_r+0x104>
 80042c2:	4252      	negs	r2, r2
 80042c4:	f043 0302 	orr.w	r3, r3, #2
 80042c8:	9207      	str	r2, [sp, #28]
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	783b      	ldrb	r3, [r7, #0]
 80042ce:	2b2e      	cmp	r3, #46	; 0x2e
 80042d0:	d10c      	bne.n	80042ec <_svfiprintf_r+0x124>
 80042d2:	787b      	ldrb	r3, [r7, #1]
 80042d4:	2b2a      	cmp	r3, #42	; 0x2a
 80042d6:	d133      	bne.n	8004340 <_svfiprintf_r+0x178>
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	9203      	str	r2, [sp, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bfb8      	it	lt
 80042e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042e8:	3702      	adds	r7, #2
 80042ea:	9305      	str	r3, [sp, #20]
 80042ec:	4d2e      	ldr	r5, [pc, #184]	; (80043a8 <_svfiprintf_r+0x1e0>)
 80042ee:	7839      	ldrb	r1, [r7, #0]
 80042f0:	2203      	movs	r2, #3
 80042f2:	4628      	mov	r0, r5
 80042f4:	f7fb ff94 	bl	8000220 <memchr>
 80042f8:	b138      	cbz	r0, 800430a <_svfiprintf_r+0x142>
 80042fa:	2340      	movs	r3, #64	; 0x40
 80042fc:	1b40      	subs	r0, r0, r5
 80042fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004302:	9b04      	ldr	r3, [sp, #16]
 8004304:	4303      	orrs	r3, r0
 8004306:	3701      	adds	r7, #1
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	7839      	ldrb	r1, [r7, #0]
 800430c:	4827      	ldr	r0, [pc, #156]	; (80043ac <_svfiprintf_r+0x1e4>)
 800430e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004312:	2206      	movs	r2, #6
 8004314:	1c7e      	adds	r6, r7, #1
 8004316:	f7fb ff83 	bl	8000220 <memchr>
 800431a:	2800      	cmp	r0, #0
 800431c:	d038      	beq.n	8004390 <_svfiprintf_r+0x1c8>
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <_svfiprintf_r+0x1e8>)
 8004320:	bb13      	cbnz	r3, 8004368 <_svfiprintf_r+0x1a0>
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	3307      	adds	r3, #7
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	3308      	adds	r3, #8
 800432c:	9303      	str	r3, [sp, #12]
 800432e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004330:	444b      	add	r3, r9
 8004332:	9309      	str	r3, [sp, #36]	; 0x24
 8004334:	e76d      	b.n	8004212 <_svfiprintf_r+0x4a>
 8004336:	fb05 3202 	mla	r2, r5, r2, r3
 800433a:	2001      	movs	r0, #1
 800433c:	460f      	mov	r7, r1
 800433e:	e7a6      	b.n	800428e <_svfiprintf_r+0xc6>
 8004340:	2300      	movs	r3, #0
 8004342:	3701      	adds	r7, #1
 8004344:	9305      	str	r3, [sp, #20]
 8004346:	4619      	mov	r1, r3
 8004348:	250a      	movs	r5, #10
 800434a:	4638      	mov	r0, r7
 800434c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004350:	3a30      	subs	r2, #48	; 0x30
 8004352:	2a09      	cmp	r2, #9
 8004354:	d903      	bls.n	800435e <_svfiprintf_r+0x196>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0c8      	beq.n	80042ec <_svfiprintf_r+0x124>
 800435a:	9105      	str	r1, [sp, #20]
 800435c:	e7c6      	b.n	80042ec <_svfiprintf_r+0x124>
 800435e:	fb05 2101 	mla	r1, r5, r1, r2
 8004362:	2301      	movs	r3, #1
 8004364:	4607      	mov	r7, r0
 8004366:	e7f0      	b.n	800434a <_svfiprintf_r+0x182>
 8004368:	ab03      	add	r3, sp, #12
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4622      	mov	r2, r4
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <_svfiprintf_r+0x1ec>)
 8004370:	a904      	add	r1, sp, #16
 8004372:	4640      	mov	r0, r8
 8004374:	f3af 8000 	nop.w
 8004378:	f1b0 3fff 	cmp.w	r0, #4294967295
 800437c:	4681      	mov	r9, r0
 800437e:	d1d6      	bne.n	800432e <_svfiprintf_r+0x166>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	065b      	lsls	r3, r3, #25
 8004384:	f53f af35 	bmi.w	80041f2 <_svfiprintf_r+0x2a>
 8004388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800438a:	b01d      	add	sp, #116	; 0x74
 800438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004390:	ab03      	add	r3, sp, #12
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	4622      	mov	r2, r4
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <_svfiprintf_r+0x1ec>)
 8004398:	a904      	add	r1, sp, #16
 800439a:	4640      	mov	r0, r8
 800439c:	f000 f882 	bl	80044a4 <_printf_i>
 80043a0:	e7ea      	b.n	8004378 <_svfiprintf_r+0x1b0>
 80043a2:	bf00      	nop
 80043a4:	08004924 	.word	0x08004924
 80043a8:	0800492a 	.word	0x0800492a
 80043ac:	0800492e 	.word	0x0800492e
 80043b0:	00000000 	.word	0x00000000
 80043b4:	08004115 	.word	0x08004115

080043b8 <_printf_common>:
 80043b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	4691      	mov	r9, r2
 80043be:	461f      	mov	r7, r3
 80043c0:	688a      	ldr	r2, [r1, #8]
 80043c2:	690b      	ldr	r3, [r1, #16]
 80043c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	bfb8      	it	lt
 80043cc:	4613      	movlt	r3, r2
 80043ce:	f8c9 3000 	str.w	r3, [r9]
 80043d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d6:	4606      	mov	r6, r0
 80043d8:	460c      	mov	r4, r1
 80043da:	b112      	cbz	r2, 80043e2 <_printf_common+0x2a>
 80043dc:	3301      	adds	r3, #1
 80043de:	f8c9 3000 	str.w	r3, [r9]
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	0699      	lsls	r1, r3, #26
 80043e6:	bf42      	ittt	mi
 80043e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043ec:	3302      	addmi	r3, #2
 80043ee:	f8c9 3000 	strmi.w	r3, [r9]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d107      	bne.n	800440a <_printf_common+0x52>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	f8d9 2000 	ldr.w	r2, [r9]
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	42ab      	cmp	r3, r5
 8004408:	dc28      	bgt.n	800445c <_printf_common+0xa4>
 800440a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	3300      	adds	r3, #0
 8004412:	bf18      	it	ne
 8004414:	2301      	movne	r3, #1
 8004416:	0692      	lsls	r2, r2, #26
 8004418:	d42d      	bmi.n	8004476 <_printf_common+0xbe>
 800441a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441e:	4639      	mov	r1, r7
 8004420:	4630      	mov	r0, r6
 8004422:	47c0      	blx	r8
 8004424:	3001      	adds	r0, #1
 8004426:	d020      	beq.n	800446a <_printf_common+0xb2>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	68e5      	ldr	r5, [r4, #12]
 800442c:	f8d9 2000 	ldr.w	r2, [r9]
 8004430:	f003 0306 	and.w	r3, r3, #6
 8004434:	2b04      	cmp	r3, #4
 8004436:	bf08      	it	eq
 8004438:	1aad      	subeq	r5, r5, r2
 800443a:	68a3      	ldr	r3, [r4, #8]
 800443c:	6922      	ldr	r2, [r4, #16]
 800443e:	bf0c      	ite	eq
 8004440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004444:	2500      	movne	r5, #0
 8004446:	4293      	cmp	r3, r2
 8004448:	bfc4      	itt	gt
 800444a:	1a9b      	subgt	r3, r3, r2
 800444c:	18ed      	addgt	r5, r5, r3
 800444e:	f04f 0900 	mov.w	r9, #0
 8004452:	341a      	adds	r4, #26
 8004454:	454d      	cmp	r5, r9
 8004456:	d11a      	bne.n	800448e <_printf_common+0xd6>
 8004458:	2000      	movs	r0, #0
 800445a:	e008      	b.n	800446e <_printf_common+0xb6>
 800445c:	2301      	movs	r3, #1
 800445e:	4652      	mov	r2, sl
 8004460:	4639      	mov	r1, r7
 8004462:	4630      	mov	r0, r6
 8004464:	47c0      	blx	r8
 8004466:	3001      	adds	r0, #1
 8004468:	d103      	bne.n	8004472 <_printf_common+0xba>
 800446a:	f04f 30ff 	mov.w	r0, #4294967295
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	3501      	adds	r5, #1
 8004474:	e7c3      	b.n	80043fe <_printf_common+0x46>
 8004476:	18e1      	adds	r1, r4, r3
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	2030      	movs	r0, #48	; 0x30
 800447c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004480:	4422      	add	r2, r4
 8004482:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004486:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800448a:	3302      	adds	r3, #2
 800448c:	e7c5      	b.n	800441a <_printf_common+0x62>
 800448e:	2301      	movs	r3, #1
 8004490:	4622      	mov	r2, r4
 8004492:	4639      	mov	r1, r7
 8004494:	4630      	mov	r0, r6
 8004496:	47c0      	blx	r8
 8004498:	3001      	adds	r0, #1
 800449a:	d0e6      	beq.n	800446a <_printf_common+0xb2>
 800449c:	f109 0901 	add.w	r9, r9, #1
 80044a0:	e7d8      	b.n	8004454 <_printf_common+0x9c>
	...

080044a4 <_printf_i>:
 80044a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044ac:	460c      	mov	r4, r1
 80044ae:	7e09      	ldrb	r1, [r1, #24]
 80044b0:	b085      	sub	sp, #20
 80044b2:	296e      	cmp	r1, #110	; 0x6e
 80044b4:	4617      	mov	r7, r2
 80044b6:	4606      	mov	r6, r0
 80044b8:	4698      	mov	r8, r3
 80044ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044bc:	f000 80b3 	beq.w	8004626 <_printf_i+0x182>
 80044c0:	d822      	bhi.n	8004508 <_printf_i+0x64>
 80044c2:	2963      	cmp	r1, #99	; 0x63
 80044c4:	d036      	beq.n	8004534 <_printf_i+0x90>
 80044c6:	d80a      	bhi.n	80044de <_printf_i+0x3a>
 80044c8:	2900      	cmp	r1, #0
 80044ca:	f000 80b9 	beq.w	8004640 <_printf_i+0x19c>
 80044ce:	2958      	cmp	r1, #88	; 0x58
 80044d0:	f000 8083 	beq.w	80045da <_printf_i+0x136>
 80044d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044dc:	e032      	b.n	8004544 <_printf_i+0xa0>
 80044de:	2964      	cmp	r1, #100	; 0x64
 80044e0:	d001      	beq.n	80044e6 <_printf_i+0x42>
 80044e2:	2969      	cmp	r1, #105	; 0x69
 80044e4:	d1f6      	bne.n	80044d4 <_printf_i+0x30>
 80044e6:	6820      	ldr	r0, [r4, #0]
 80044e8:	6813      	ldr	r3, [r2, #0]
 80044ea:	0605      	lsls	r5, r0, #24
 80044ec:	f103 0104 	add.w	r1, r3, #4
 80044f0:	d52a      	bpl.n	8004548 <_printf_i+0xa4>
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6011      	str	r1, [r2, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da03      	bge.n	8004502 <_printf_i+0x5e>
 80044fa:	222d      	movs	r2, #45	; 0x2d
 80044fc:	425b      	negs	r3, r3
 80044fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004502:	486f      	ldr	r0, [pc, #444]	; (80046c0 <_printf_i+0x21c>)
 8004504:	220a      	movs	r2, #10
 8004506:	e039      	b.n	800457c <_printf_i+0xd8>
 8004508:	2973      	cmp	r1, #115	; 0x73
 800450a:	f000 809d 	beq.w	8004648 <_printf_i+0x1a4>
 800450e:	d808      	bhi.n	8004522 <_printf_i+0x7e>
 8004510:	296f      	cmp	r1, #111	; 0x6f
 8004512:	d020      	beq.n	8004556 <_printf_i+0xb2>
 8004514:	2970      	cmp	r1, #112	; 0x70
 8004516:	d1dd      	bne.n	80044d4 <_printf_i+0x30>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f043 0320 	orr.w	r3, r3, #32
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	e003      	b.n	800452a <_printf_i+0x86>
 8004522:	2975      	cmp	r1, #117	; 0x75
 8004524:	d017      	beq.n	8004556 <_printf_i+0xb2>
 8004526:	2978      	cmp	r1, #120	; 0x78
 8004528:	d1d4      	bne.n	80044d4 <_printf_i+0x30>
 800452a:	2378      	movs	r3, #120	; 0x78
 800452c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004530:	4864      	ldr	r0, [pc, #400]	; (80046c4 <_printf_i+0x220>)
 8004532:	e055      	b.n	80045e0 <_printf_i+0x13c>
 8004534:	6813      	ldr	r3, [r2, #0]
 8004536:	1d19      	adds	r1, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6011      	str	r1, [r2, #0]
 800453c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e08c      	b.n	8004662 <_printf_i+0x1be>
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6011      	str	r1, [r2, #0]
 800454c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004550:	bf18      	it	ne
 8004552:	b21b      	sxthne	r3, r3
 8004554:	e7cf      	b.n	80044f6 <_printf_i+0x52>
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	6825      	ldr	r5, [r4, #0]
 800455a:	1d18      	adds	r0, r3, #4
 800455c:	6010      	str	r0, [r2, #0]
 800455e:	0628      	lsls	r0, r5, #24
 8004560:	d501      	bpl.n	8004566 <_printf_i+0xc2>
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	e002      	b.n	800456c <_printf_i+0xc8>
 8004566:	0668      	lsls	r0, r5, #25
 8004568:	d5fb      	bpl.n	8004562 <_printf_i+0xbe>
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	4854      	ldr	r0, [pc, #336]	; (80046c0 <_printf_i+0x21c>)
 800456e:	296f      	cmp	r1, #111	; 0x6f
 8004570:	bf14      	ite	ne
 8004572:	220a      	movne	r2, #10
 8004574:	2208      	moveq	r2, #8
 8004576:	2100      	movs	r1, #0
 8004578:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800457c:	6865      	ldr	r5, [r4, #4]
 800457e:	60a5      	str	r5, [r4, #8]
 8004580:	2d00      	cmp	r5, #0
 8004582:	f2c0 8095 	blt.w	80046b0 <_printf_i+0x20c>
 8004586:	6821      	ldr	r1, [r4, #0]
 8004588:	f021 0104 	bic.w	r1, r1, #4
 800458c:	6021      	str	r1, [r4, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d13d      	bne.n	800460e <_printf_i+0x16a>
 8004592:	2d00      	cmp	r5, #0
 8004594:	f040 808e 	bne.w	80046b4 <_printf_i+0x210>
 8004598:	4665      	mov	r5, ip
 800459a:	2a08      	cmp	r2, #8
 800459c:	d10b      	bne.n	80045b6 <_printf_i+0x112>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	07db      	lsls	r3, r3, #31
 80045a2:	d508      	bpl.n	80045b6 <_printf_i+0x112>
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	bfde      	ittt	le
 80045ac:	2330      	movle	r3, #48	; 0x30
 80045ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045b6:	ebac 0305 	sub.w	r3, ip, r5
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	f8cd 8000 	str.w	r8, [sp]
 80045c0:	463b      	mov	r3, r7
 80045c2:	aa03      	add	r2, sp, #12
 80045c4:	4621      	mov	r1, r4
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7ff fef6 	bl	80043b8 <_printf_common>
 80045cc:	3001      	adds	r0, #1
 80045ce:	d14d      	bne.n	800466c <_printf_i+0x1c8>
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	b005      	add	sp, #20
 80045d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045da:	4839      	ldr	r0, [pc, #228]	; (80046c0 <_printf_i+0x21c>)
 80045dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045e0:	6813      	ldr	r3, [r2, #0]
 80045e2:	6821      	ldr	r1, [r4, #0]
 80045e4:	1d1d      	adds	r5, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6015      	str	r5, [r2, #0]
 80045ea:	060a      	lsls	r2, r1, #24
 80045ec:	d50b      	bpl.n	8004606 <_printf_i+0x162>
 80045ee:	07ca      	lsls	r2, r1, #31
 80045f0:	bf44      	itt	mi
 80045f2:	f041 0120 	orrmi.w	r1, r1, #32
 80045f6:	6021      	strmi	r1, [r4, #0]
 80045f8:	b91b      	cbnz	r3, 8004602 <_printf_i+0x15e>
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	f022 0220 	bic.w	r2, r2, #32
 8004600:	6022      	str	r2, [r4, #0]
 8004602:	2210      	movs	r2, #16
 8004604:	e7b7      	b.n	8004576 <_printf_i+0xd2>
 8004606:	064d      	lsls	r5, r1, #25
 8004608:	bf48      	it	mi
 800460a:	b29b      	uxthmi	r3, r3
 800460c:	e7ef      	b.n	80045ee <_printf_i+0x14a>
 800460e:	4665      	mov	r5, ip
 8004610:	fbb3 f1f2 	udiv	r1, r3, r2
 8004614:	fb02 3311 	mls	r3, r2, r1, r3
 8004618:	5cc3      	ldrb	r3, [r0, r3]
 800461a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800461e:	460b      	mov	r3, r1
 8004620:	2900      	cmp	r1, #0
 8004622:	d1f5      	bne.n	8004610 <_printf_i+0x16c>
 8004624:	e7b9      	b.n	800459a <_printf_i+0xf6>
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	6825      	ldr	r5, [r4, #0]
 800462a:	6961      	ldr	r1, [r4, #20]
 800462c:	1d18      	adds	r0, r3, #4
 800462e:	6010      	str	r0, [r2, #0]
 8004630:	0628      	lsls	r0, r5, #24
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	d501      	bpl.n	800463a <_printf_i+0x196>
 8004636:	6019      	str	r1, [r3, #0]
 8004638:	e002      	b.n	8004640 <_printf_i+0x19c>
 800463a:	066a      	lsls	r2, r5, #25
 800463c:	d5fb      	bpl.n	8004636 <_printf_i+0x192>
 800463e:	8019      	strh	r1, [r3, #0]
 8004640:	2300      	movs	r3, #0
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	4665      	mov	r5, ip
 8004646:	e7b9      	b.n	80045bc <_printf_i+0x118>
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	1d19      	adds	r1, r3, #4
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	681d      	ldr	r5, [r3, #0]
 8004650:	6862      	ldr	r2, [r4, #4]
 8004652:	2100      	movs	r1, #0
 8004654:	4628      	mov	r0, r5
 8004656:	f7fb fde3 	bl	8000220 <memchr>
 800465a:	b108      	cbz	r0, 8004660 <_printf_i+0x1bc>
 800465c:	1b40      	subs	r0, r0, r5
 800465e:	6060      	str	r0, [r4, #4]
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	6123      	str	r3, [r4, #16]
 8004664:	2300      	movs	r3, #0
 8004666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800466a:	e7a7      	b.n	80045bc <_printf_i+0x118>
 800466c:	6923      	ldr	r3, [r4, #16]
 800466e:	462a      	mov	r2, r5
 8004670:	4639      	mov	r1, r7
 8004672:	4630      	mov	r0, r6
 8004674:	47c0      	blx	r8
 8004676:	3001      	adds	r0, #1
 8004678:	d0aa      	beq.n	80045d0 <_printf_i+0x12c>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	079b      	lsls	r3, r3, #30
 800467e:	d413      	bmi.n	80046a8 <_printf_i+0x204>
 8004680:	68e0      	ldr	r0, [r4, #12]
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	4298      	cmp	r0, r3
 8004686:	bfb8      	it	lt
 8004688:	4618      	movlt	r0, r3
 800468a:	e7a3      	b.n	80045d4 <_printf_i+0x130>
 800468c:	2301      	movs	r3, #1
 800468e:	464a      	mov	r2, r9
 8004690:	4639      	mov	r1, r7
 8004692:	4630      	mov	r0, r6
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d09a      	beq.n	80045d0 <_printf_i+0x12c>
 800469a:	3501      	adds	r5, #1
 800469c:	68e3      	ldr	r3, [r4, #12]
 800469e:	9a03      	ldr	r2, [sp, #12]
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	42ab      	cmp	r3, r5
 80046a4:	dcf2      	bgt.n	800468c <_printf_i+0x1e8>
 80046a6:	e7eb      	b.n	8004680 <_printf_i+0x1dc>
 80046a8:	2500      	movs	r5, #0
 80046aa:	f104 0919 	add.w	r9, r4, #25
 80046ae:	e7f5      	b.n	800469c <_printf_i+0x1f8>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ac      	bne.n	800460e <_printf_i+0x16a>
 80046b4:	7803      	ldrb	r3, [r0, #0]
 80046b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046be:	e76c      	b.n	800459a <_printf_i+0xf6>
 80046c0:	08004935 	.word	0x08004935
 80046c4:	08004946 	.word	0x08004946

080046c8 <memcpy>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	1e43      	subs	r3, r0, #1
 80046cc:	440a      	add	r2, r1
 80046ce:	4291      	cmp	r1, r2
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	bd10      	pop	{r4, pc}
 80046d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046dc:	e7f7      	b.n	80046ce <memcpy+0x6>

080046de <memmove>:
 80046de:	4288      	cmp	r0, r1
 80046e0:	b510      	push	{r4, lr}
 80046e2:	eb01 0302 	add.w	r3, r1, r2
 80046e6:	d807      	bhi.n	80046f8 <memmove+0x1a>
 80046e8:	1e42      	subs	r2, r0, #1
 80046ea:	4299      	cmp	r1, r3
 80046ec:	d00a      	beq.n	8004704 <memmove+0x26>
 80046ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046f6:	e7f8      	b.n	80046ea <memmove+0xc>
 80046f8:	4283      	cmp	r3, r0
 80046fa:	d9f5      	bls.n	80046e8 <memmove+0xa>
 80046fc:	1881      	adds	r1, r0, r2
 80046fe:	1ad2      	subs	r2, r2, r3
 8004700:	42d3      	cmn	r3, r2
 8004702:	d100      	bne.n	8004706 <memmove+0x28>
 8004704:	bd10      	pop	{r4, pc}
 8004706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800470a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800470e:	e7f7      	b.n	8004700 <memmove+0x22>

08004710 <_free_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4605      	mov	r5, r0
 8004714:	2900      	cmp	r1, #0
 8004716:	d045      	beq.n	80047a4 <_free_r+0x94>
 8004718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471c:	1f0c      	subs	r4, r1, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfb8      	it	lt
 8004722:	18e4      	addlt	r4, r4, r3
 8004724:	f000 f8d2 	bl	80048cc <__malloc_lock>
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <_free_r+0x98>)
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	4610      	mov	r0, r2
 800472e:	b933      	cbnz	r3, 800473e <_free_r+0x2e>
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	6014      	str	r4, [r2, #0]
 8004734:	4628      	mov	r0, r5
 8004736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800473a:	f000 b8c8 	b.w	80048ce <__malloc_unlock>
 800473e:	42a3      	cmp	r3, r4
 8004740:	d90c      	bls.n	800475c <_free_r+0x4c>
 8004742:	6821      	ldr	r1, [r4, #0]
 8004744:	1862      	adds	r2, r4, r1
 8004746:	4293      	cmp	r3, r2
 8004748:	bf04      	itt	eq
 800474a:	681a      	ldreq	r2, [r3, #0]
 800474c:	685b      	ldreq	r3, [r3, #4]
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	bf04      	itt	eq
 8004752:	1852      	addeq	r2, r2, r1
 8004754:	6022      	streq	r2, [r4, #0]
 8004756:	6004      	str	r4, [r0, #0]
 8004758:	e7ec      	b.n	8004734 <_free_r+0x24>
 800475a:	4613      	mov	r3, r2
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	b10a      	cbz	r2, 8004764 <_free_r+0x54>
 8004760:	42a2      	cmp	r2, r4
 8004762:	d9fa      	bls.n	800475a <_free_r+0x4a>
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	1858      	adds	r0, r3, r1
 8004768:	42a0      	cmp	r0, r4
 800476a:	d10b      	bne.n	8004784 <_free_r+0x74>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	4401      	add	r1, r0
 8004770:	1858      	adds	r0, r3, r1
 8004772:	4282      	cmp	r2, r0
 8004774:	6019      	str	r1, [r3, #0]
 8004776:	d1dd      	bne.n	8004734 <_free_r+0x24>
 8004778:	6810      	ldr	r0, [r2, #0]
 800477a:	6852      	ldr	r2, [r2, #4]
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	4401      	add	r1, r0
 8004780:	6019      	str	r1, [r3, #0]
 8004782:	e7d7      	b.n	8004734 <_free_r+0x24>
 8004784:	d902      	bls.n	800478c <_free_r+0x7c>
 8004786:	230c      	movs	r3, #12
 8004788:	602b      	str	r3, [r5, #0]
 800478a:	e7d3      	b.n	8004734 <_free_r+0x24>
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	1821      	adds	r1, r4, r0
 8004790:	428a      	cmp	r2, r1
 8004792:	bf04      	itt	eq
 8004794:	6811      	ldreq	r1, [r2, #0]
 8004796:	6852      	ldreq	r2, [r2, #4]
 8004798:	6062      	str	r2, [r4, #4]
 800479a:	bf04      	itt	eq
 800479c:	1809      	addeq	r1, r1, r0
 800479e:	6021      	streq	r1, [r4, #0]
 80047a0:	605c      	str	r4, [r3, #4]
 80047a2:	e7c7      	b.n	8004734 <_free_r+0x24>
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
 80047a6:	bf00      	nop
 80047a8:	20000090 	.word	0x20000090

080047ac <_malloc_r>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	1ccd      	adds	r5, r1, #3
 80047b0:	f025 0503 	bic.w	r5, r5, #3
 80047b4:	3508      	adds	r5, #8
 80047b6:	2d0c      	cmp	r5, #12
 80047b8:	bf38      	it	cc
 80047ba:	250c      	movcc	r5, #12
 80047bc:	2d00      	cmp	r5, #0
 80047be:	4606      	mov	r6, r0
 80047c0:	db01      	blt.n	80047c6 <_malloc_r+0x1a>
 80047c2:	42a9      	cmp	r1, r5
 80047c4:	d903      	bls.n	80047ce <_malloc_r+0x22>
 80047c6:	230c      	movs	r3, #12
 80047c8:	6033      	str	r3, [r6, #0]
 80047ca:	2000      	movs	r0, #0
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	f000 f87d 	bl	80048cc <__malloc_lock>
 80047d2:	4a21      	ldr	r2, [pc, #132]	; (8004858 <_malloc_r+0xac>)
 80047d4:	6814      	ldr	r4, [r2, #0]
 80047d6:	4621      	mov	r1, r4
 80047d8:	b991      	cbnz	r1, 8004800 <_malloc_r+0x54>
 80047da:	4c20      	ldr	r4, [pc, #128]	; (800485c <_malloc_r+0xb0>)
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	b91b      	cbnz	r3, 80047e8 <_malloc_r+0x3c>
 80047e0:	4630      	mov	r0, r6
 80047e2:	f000 f863 	bl	80048ac <_sbrk_r>
 80047e6:	6020      	str	r0, [r4, #0]
 80047e8:	4629      	mov	r1, r5
 80047ea:	4630      	mov	r0, r6
 80047ec:	f000 f85e 	bl	80048ac <_sbrk_r>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d124      	bne.n	800483e <_malloc_r+0x92>
 80047f4:	230c      	movs	r3, #12
 80047f6:	6033      	str	r3, [r6, #0]
 80047f8:	4630      	mov	r0, r6
 80047fa:	f000 f868 	bl	80048ce <__malloc_unlock>
 80047fe:	e7e4      	b.n	80047ca <_malloc_r+0x1e>
 8004800:	680b      	ldr	r3, [r1, #0]
 8004802:	1b5b      	subs	r3, r3, r5
 8004804:	d418      	bmi.n	8004838 <_malloc_r+0x8c>
 8004806:	2b0b      	cmp	r3, #11
 8004808:	d90f      	bls.n	800482a <_malloc_r+0x7e>
 800480a:	600b      	str	r3, [r1, #0]
 800480c:	50cd      	str	r5, [r1, r3]
 800480e:	18cc      	adds	r4, r1, r3
 8004810:	4630      	mov	r0, r6
 8004812:	f000 f85c 	bl	80048ce <__malloc_unlock>
 8004816:	f104 000b 	add.w	r0, r4, #11
 800481a:	1d23      	adds	r3, r4, #4
 800481c:	f020 0007 	bic.w	r0, r0, #7
 8004820:	1ac3      	subs	r3, r0, r3
 8004822:	d0d3      	beq.n	80047cc <_malloc_r+0x20>
 8004824:	425a      	negs	r2, r3
 8004826:	50e2      	str	r2, [r4, r3]
 8004828:	e7d0      	b.n	80047cc <_malloc_r+0x20>
 800482a:	428c      	cmp	r4, r1
 800482c:	684b      	ldr	r3, [r1, #4]
 800482e:	bf16      	itet	ne
 8004830:	6063      	strne	r3, [r4, #4]
 8004832:	6013      	streq	r3, [r2, #0]
 8004834:	460c      	movne	r4, r1
 8004836:	e7eb      	b.n	8004810 <_malloc_r+0x64>
 8004838:	460c      	mov	r4, r1
 800483a:	6849      	ldr	r1, [r1, #4]
 800483c:	e7cc      	b.n	80047d8 <_malloc_r+0x2c>
 800483e:	1cc4      	adds	r4, r0, #3
 8004840:	f024 0403 	bic.w	r4, r4, #3
 8004844:	42a0      	cmp	r0, r4
 8004846:	d005      	beq.n	8004854 <_malloc_r+0xa8>
 8004848:	1a21      	subs	r1, r4, r0
 800484a:	4630      	mov	r0, r6
 800484c:	f000 f82e 	bl	80048ac <_sbrk_r>
 8004850:	3001      	adds	r0, #1
 8004852:	d0cf      	beq.n	80047f4 <_malloc_r+0x48>
 8004854:	6025      	str	r5, [r4, #0]
 8004856:	e7db      	b.n	8004810 <_malloc_r+0x64>
 8004858:	20000090 	.word	0x20000090
 800485c:	20000094 	.word	0x20000094

08004860 <_realloc_r>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	4607      	mov	r7, r0
 8004864:	4614      	mov	r4, r2
 8004866:	460e      	mov	r6, r1
 8004868:	b921      	cbnz	r1, 8004874 <_realloc_r+0x14>
 800486a:	4611      	mov	r1, r2
 800486c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004870:	f7ff bf9c 	b.w	80047ac <_malloc_r>
 8004874:	b922      	cbnz	r2, 8004880 <_realloc_r+0x20>
 8004876:	f7ff ff4b 	bl	8004710 <_free_r>
 800487a:	4625      	mov	r5, r4
 800487c:	4628      	mov	r0, r5
 800487e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004880:	f000 f826 	bl	80048d0 <_malloc_usable_size_r>
 8004884:	42a0      	cmp	r0, r4
 8004886:	d20f      	bcs.n	80048a8 <_realloc_r+0x48>
 8004888:	4621      	mov	r1, r4
 800488a:	4638      	mov	r0, r7
 800488c:	f7ff ff8e 	bl	80047ac <_malloc_r>
 8004890:	4605      	mov	r5, r0
 8004892:	2800      	cmp	r0, #0
 8004894:	d0f2      	beq.n	800487c <_realloc_r+0x1c>
 8004896:	4631      	mov	r1, r6
 8004898:	4622      	mov	r2, r4
 800489a:	f7ff ff15 	bl	80046c8 <memcpy>
 800489e:	4631      	mov	r1, r6
 80048a0:	4638      	mov	r0, r7
 80048a2:	f7ff ff35 	bl	8004710 <_free_r>
 80048a6:	e7e9      	b.n	800487c <_realloc_r+0x1c>
 80048a8:	4635      	mov	r5, r6
 80048aa:	e7e7      	b.n	800487c <_realloc_r+0x1c>

080048ac <_sbrk_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4c06      	ldr	r4, [pc, #24]	; (80048c8 <_sbrk_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4605      	mov	r5, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	f7fc fe54 	bl	8001564 <_sbrk>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_sbrk_r+0x1a>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_sbrk_r+0x1a>
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	20000294 	.word	0x20000294

080048cc <__malloc_lock>:
 80048cc:	4770      	bx	lr

080048ce <__malloc_unlock>:
 80048ce:	4770      	bx	lr

080048d0 <_malloc_usable_size_r>:
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f18      	subs	r0, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfbc      	itt	lt
 80048da:	580b      	ldrlt	r3, [r1, r0]
 80048dc:	18c0      	addlt	r0, r0, r3
 80048de:	4770      	bx	lr

080048e0 <_init>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

080048ec <_fini>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr
